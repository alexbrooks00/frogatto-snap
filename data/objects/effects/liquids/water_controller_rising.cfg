{
id: "water_controller_rising",
prototype: ["liquid"], //implements 'triggerable' prototype
zorder: "@include data/zorder.cfg:liquid_particle_effects", always_active:true,

editor_info: {
	help: "duration_of_motion: When the water should finish moving.
motion_cycle: How much time has passed in the animation. Scrubbable, so you can test!
positions: Target heights for the water as time passes. (Ignores x coordinate.)
wait_for_trigger: Don't start the water movement immeadiately. (Stops water
	rising. Maybe can be hooked into stuff like levers and level_controller_onetimes?)
fluid_type: Water, acid, or lethal acid.",
},

properties: {
	add_water_effect: "[
		add_water(_x_bound, position_at_cycle(motion_cycle), _x2_bound, _y2_bound, water_colours[fluid_type]),
		set(last_water_area, [_x_bound, position_at_cycle(motion_cycle), _x2_bound, _y2_bound]),
	]",
	remove_water_effect: "[
		remove_water(last_water_area[0], last_water_area[1], last_water_area[2], last_water_area[3]),
	]",
	
	//For removal code, note where we added.
	last_water_area: {type: "[int, int, int, int]", default: [0,0,0,0]},
	
	add_particle_effect: "[
		add_particles('bubbles'),
		fire_event('setup_particles')
	]",
	
	duration_of_motion: { type: "int", editor_info: { type: "int", value: "500" } },
	motion_cycle: { type: "int", editor_info: { type: "int", value: "0", min_value: 0, max_value: 15000 } },
	positions: { type: "[Point2d]", editor_info: { type: "points", value: "[mid_xy, [mid_x, mid_y-100]]" } },
	
	position_at_cycle: "def(int time) -> int int(lib.math.interpolate(
		map(positions, value[1]), 
		lib.math.constrain(0, time/1.0/duration_of_motion, 1),
	))",
	
	wait_for_trigger: { type: "bool", editor_info: { type: "boolean", value: "false" } },
	
	water_colours: {
		type: "{string -> [int,int,int,int]}",
		default: {
			water: [70,0,0,50],
			acid: [70,0,70,50],
			lethal_acid: [70,0,70,50],
		}
	},
	
	liquid_damage: "{
		water: 0,
		acid: if(higher_difficulty, 2, 1),
		lethal_acid: kill_anything,
	}[fluid_type]",
	
	fluid_type: {
		type: "string", 
		default: "water", 
		editor_info: {type: "enum", value: "'water'", enum_values: ["water", "acid", "lethal_acid"],},
	},
	
	//TRIGGERABLE PROTOTYPE FUNCTIONS:
	event: { type: "string", default:"", editor_info: { type: "string" } },

	trigger_on: "commands :: fire_event(me,'button_pressed')",
	trigger_off: "commands :: fire_event(me,'button_released')",
},

on_create: "if(find(level.frame_buffer_shaders, value.shader_info = 'water_distort') = null,
	add(level.frame_buffer_shaders, [{
		begin_zorder: -10000000,
		end_zorder: lib.zorder.get('water'),
		shader_info: 'water_distort'
	}])
)",

on_setup_particles: "[
	set(particle_systems['bubbles'].area, [_x_bound, _y_bound, _x2_bound, _y2_bound]),
]",

on_process: "if(motion_cycle <= duration_of_motion and (wait_for_trigger = false), [
	remove_water(last_water_area[0], last_water_area[1],last_water_area[2], last_water_area[3]),
	add_water(_x_bound, position_at_cycle(motion_cycle), _x2_bound, _y2_bound, water_colours[fluid_type]),
	set(last_water_area, [_x_bound, position_at_cycle(motion_cycle), _x2_bound, _y2_bound]),
	set(particle_systems['bubbles'].area, [_x_bound, position_at_cycle(motion_cycle), _x2_bound, _y2_bound]),
	
	add(motion_cycle, 1),
])",

on_button_pressed: "set(wait_for_trigger, false)",
on_triggered: "set(wait_for_trigger, false)", //Is this event used?

animation: {
	id: "normal",
	image: "effects/particles.png",
	x: 117, y: 42, w: 28, h: 28,
	frames: 1,
	duration: 1000,
},

particle_system: [{
		id: "bubbles",
		type: "water",
		number_of_particles: 100,
		repeat_period: 200,
		velocity_y: -1,
		velocity_x: 0,
		velocity_rand: 4,
		dot_size: 2,
		color: [120,160,255,100],
}],
}