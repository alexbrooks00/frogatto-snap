{
id: "gate",
zorder: "@include data/zorder.cfg:exterior_decor",
prototype: ["triggerable"],
has_feet: false,
always_active: true,
solid_dimensions: ["player","common","thrown"],
collide_dimensions: ["key"],
adjust_feet_on_animation_change: false,
timer_frequency: 5,
is_strict: true,

editor_info: {
	category: "props",
},

properties: {
	locks: "[obj padlock] :: filter(level.chars, value is obj padlock and abs(lib.math.length(context.me, value)) < 100)",
	
	test_locks: "def(object possible_key) -> commands map(locks, 'lock', 
								if(possible_key is obj padlock_key,
									if(lock.color = possible_key.color, 
										[fire_event(lock, 'unlock'), 
											if(frogatto.swallowed_object != null and frogatto.swallowed_object = possible_key, frogatto.empty_stomach({kill_contents: true}), remove_object(possible_key))]))) where frogatto = (obj frogatto_playable <- level.player)",
		
	//check the cycle to avoid contention with a lock that's about to kill itself
	is_locked: "bool :: (bool(locks) and level.cycle > 0) or (not event_status)",
	
	portcullis: { type: "obj gate.portcullis", init: "object('gate.portcullis', img_mid_x, img_mid_y, {facing:facing, origin_y: y, clip_area_absolute: true, clip_area: [x+0,y+18,me.img_w,me.img_h]})" },

	overlay: { type: "obj gate.overlay", init: "object('gate.overlay', img_mid_x,img_mid_y,facing)" },
	
	
#-------------------------- triggerable overrides --------------------------#
	preferred_visual_focus_object_for_camera: "overlay",

},


on_create: "[
	set(animation,if(is_locked, 'locked', 'unlocked')), 
	add_object(portcullis),
	set(portcullis.is_locked, is_locked),
	bind_command(def() portcullis.immediately_set_pos),
	add_object(overlay),
]",


#-------------------------- triggerable hooks --------------------------#
on_lock: "if(event, level.player.store_event(event,0)) 
	asserting event | 'You must set an event for this gate in the editor; the event is global in nature, and is used to remember which gates are open.'",
on_unlock: "if(event, level.player.store_event(event,1)) 
	asserting event | 'You must set an event for this gate in the editor; the event is global in nature, and is used to remember which gates are open.'",

on_button_pressed: "[fire_event('unlock')]",
on_button_released: "[fire_event('lock')]",


#-------------------------- key handling --------------------------#
on_collide_object: "[
	test_locks(arg.collide_with),
	if(locks,schedule(1,fire_event('check_locks')))
]",
on_check_locks: "if(not locks, fire_event('unlock'))",


#-------------------------- animation controls --------------------------#

#If we fail to change the animation like we desire, we revert to our previous animation, and then schedule another attempt to change the animation next cycle.
on_change_animation_failure: "[
	animation(arg.previous_animation), 
	schedule(1, animation(animation)),
]",

on_process: "
				if(is_locked,
					if(animation = 'unlocked',
						[
							set(animation, 'closing'),
							fire_event( portcullis,'lock'),
						],
						set(animation, 'locked')
					),
					if(animation = 'locked',
						[
							set(animation, 'opening'),
							fire_event( portcullis,'unlock'),
						],
						set(animation, 'unlocked')
					)
				) asserting portcullis",
										

animation: [
	{
		"@base": true,
		image: "props/gate.png",
		pad: 3,
		gate_area: [0,0,39,120,"solid"],
		palettes: "@include data/palettes.cfg:dungeon_palettes",
		frames: 1,
		rect: [2,2,39,120],
	},
	{  //it's really important the 'locked' animation is the default one, because this will throw an assert on frame one if the object is placed in a bad position in the level.
		id: "locked",
		solid_area: [8,20,21,93],
		duration: 30,
	},
	{
		id: "unlocked",
		solid_area: [8,20,21,30],
		duration: 30,
	},
	{
		id: "opening",
		solid_area: [8,20,21,40],
		duration: 28,
	},
	{
		id: "closing",
		solid_area: [8,20,21,40],
		duration: 24,
		play_backwards: true,
	},
],
object_type: [
	{
		id: "overlay",
		zorder: "@include data/zorder.cfg:wooden_scaffolding_foreground",
		has_feet: false,
		always_active: true,
		on_end_anim: "animation('normal')",
		animation: {
			image: "props/gate.png",
			pad: 3,
			id: "normal",
			rect: [43,2,80,104],
			frames: 1,
			duration: 1000,
			palettes: "@include data/palettes.cfg:dungeon_palettes",
		},
	},
	{
		id: "portcullis",
		zorder: "@include data/zorder.cfg:exterior_decor",
		zsub_order: 5,
		has_feet: false,
		always_active: true,
		adjust_feet_on_animation_change: false,
		prototype: ["standard_values"],
		
		properties: {
			set_at_open_pos: "def() -> commands [
				animation('normal'),
				set(y,origin_y-120),
			]",
			
			set_at_closed_pos: "def() -> commands [
				animation('normal'),
				set(y,origin_y),
			]",
			
			origin_y: { type: "int", default: 2 },

			is_locked: { type: "bool", default: false },
			immediately_set_pos: "if(is_locked, set_at_closed_pos(),set_at_open_pos())",
			
			sound_guarded: "def(string filename, int time_offset) -> commands
				/*
					Since it's too hard to rebuild the lock/unlock code in an immediate and non-animated way (critically; a second code path is a bit problematic), we're plugging the only real drawback of 'going through the animation every time, including at level load', by adding a small guard statement to not do the sound if we're just starting the level.
				*/
				if(level.cycle > 20,
					bind_command(
						def() schedule(time_offset, play_sound__falloff(filename))
					)
				)
			",
		},
		
		on_lock: "[
			set(me.is_locked,true),
			sound_guarded('gate-close.ogg', 10),
			animate(me,
				{
					y: origin_y
				},
				{
					duration: 20,
					easing: lib.math.ease_out_bounce,
					on_complete: [],
				}
			),
		]",
		on_unlock: "[
			set(me.is_locked,false),
			sound_guarded('gate-open.ogg', 0),
			animate(me,
				{
					y: origin_y - 120
				},
				{
					duration: 30,
					easing: lib.math.ease_out_back,
					on_complete: [],
				}
			),
		]",

		on_end_normal_anim: "animation('normal')",
		
		animation: [
			{
				image: "props/gate.png",
				pad: 3,
				id: "normal",
				rect: [84,2,121,104],
				frames: 1,
				duration: 200,
				palettes: "@include data/palettes.cfg:dungeon_palettes",
			}
		],
	},
],
}
