{
	"air_resistance": 20,
	"auto_move_camera": [0,0],
	"background": "seaside",
	"background_offset": [0,0],
	"character": [
		{
			"_uuid": "bddbe930efa542fba3db29ce610e547f",
			"current_frame": "normal",
			"custom": true,
			"label": "_54913573",
			"type": "wall_clock",
			"x": 448,
			"y": -32
		},
		{
			"_uuid": "218e1dfa8ee549a897292528d608ee07",
			"current_frame": "normal",
			"custom": true,
			"label": "_94c3c65",
			"type": "painting_leaf",
			"x": 992,
			"y": 448
		},
		{
			"_uuid": "d399a7a2620649b6bf840dac7197a50d",
			"current_frame": "normal",
			"custom": true,
			"label": "_541ad45e",
			"type": "potbelly_stove",
			"x": 1472,
			"y": 544
		},
		{
			"_uuid": "ab80d6f267704f6386cab00f0e5feca9",
			"current_frame": "normal",
			"custom": true,
			"label": "_3303569f",
			"type": "ceiling_lamp",
			"x": 1408,
			"y": 288
		},
		{
			"_uuid": "e30521796dd447d0a6acb95254c8632e",
			"current_frame": "normal",
			"custom": true,
			"label": "_27645d95",
			"type": "ceiling_lamp",
			"x": 1152,
			"y": 288
		},
		{
			"_uuid": "84928eef565a4d679033477bd19adff1",
			"current_frame": "normal",
			"custom": true,
			"label": "_29448884",
			"type": "wooden_shelves_empty",
			"x": 224,
			"y": 512
		},
		{
			"_uuid": "8528d49676414308aec30c5cc15178a0",
			"current_frame": "normal",
			"custom": true,
			"label": "_525ea746",
			"type": "wooden_shelves_fruit1",
			"x": 288,
			"y": 512
		},
		{
			"_uuid": "f258688ac4654a20830475e544f2c7aa",
			"current_frame": "normal",
			"custom": true,
			"label": "_7072aba7",
			"type": "wooden_wardrobe",
			"x": 1504,
			"y": 64
		},
		{
			"_uuid": "f52fe7f3b78e4749937570416e826e15",
			"current_frame": "normal",
			"custom": true,
			"label": "_78639a9d",
			"type": "wooden_bed",
			"x": 1376,
			"y": 128
		},
		{
			"_uuid": "c82d33bf61164826b035402d5d5d94cc",
			"current_frame": "normal",
			"custom": true,
			"label": "_533bf72a",
			"type": "wooden_nightstand",
			"x": 928,
			"y": 544
		},
		{
			"_uuid": "ad499043ec4244168aaa893dbfb5f8fb",
			"current_frame": "normal",
			"custom": true,
			"label": "_624b6b97",
			"property_data": {
				"_is_bubbling": true
			},
			"type": "bubbling_pot",
			"x": 1477,
			"y": 590
		},
		{
			"_uuid": "8e573ffa30554d12b8ce5e61d631e6d3",
			"current_frame": "normal",
			"custom": true,
			"label": "_2f984d48",
			"property_data": {
				"_move_speed": 3,
				"_x2_bound": 896,
				"_x_bound": 800,
				"_y2_bound": 576,
				"_y_bound": 129
			},
			"type": "platform-seaside-interior",
			"x": 800,
			"y": 544
		},
		{
			"_uuid": "508d6dc0d1a24231bb2d5a4835885d63",
			"current_frame": "normal",
			"custom": true,
			"label": "right-door",
			"property_data": {
				"_dest_door": "right_door",
				"_dest_level": "secluded-hut.cfg",
				"_goes_to_illuminated_place": true
			},
			"type": "seaside_house_interior_door_large",
			"x": 1280,
			"y": 544
		},
		{
			"_uuid": "b2f231758e0241f58ded4e5ec06fe252",
			"current_frame": "normal",
			"custom": true,
			"label": "_637056d8",
			"property_data": {
				"is_burning": true
			},
			"type": "fireplace_seaside",
			"x": 608,
			"y": 506
		},
		{
			"_uuid": "eea22ae5c25e4649a044e8c780d3160f",
			"current_frame": "normal",
			"custom": true,
			"label": "_303132e5",
			"type": "chair_red",
			"x": 1000,
			"y": 96
		},
		{
			"_uuid": "f98a397dbc904d24bfdf6e16ced89061",
			"current_frame": "normal",
			"custom": true,
			"label": "_4e030db3",
			"on_talk": "speech_dialog(
			set(level.player.animation, 'emote_talk'),
			level.player, [~It says,\\n\"Health Risks of Exotic Mushrooms.\"~])",
			"type": "wooden_shelves_big_books",
			"x": 1120,
			"y": 32
		},
		{
			"_uuid": "4afe5ade2a67404db60597818e39f469",
			"current_frame": "normal",
			"custom": true,
			"face_right": false,
			"label": "_344ddf45",
			"type": "plant_potted",
			"x": 618,
			"y": 490
		},
		{
			"_uuid": "395cf721841a4ce588e994a5bfa0892d",
			"current_frame": "normal",
			"custom": true,
			"label": "_4c4f77bb",
			"on_talk": "speech_dialog(
			set(level.player.animation, 'emote_talk'),
			level.player, [~It says,\\n\"All the Worst Animals.\"~])",
			"type": "wooden_shelves_big_books3",
			"x": 1248,
			"y": 32
		},
		{
			"_uuid": "12f10180683e469cbe8422bd9b1d66dd",
			"current_frame": "normal",
			"custom": true,
			"label": "_4e645564",
			"on_talk": "speech_dialog(
			set(level.player.animation, 'emote_talk'),
			level.player, [~It says, \"Migratory Patterns\\nof the Double-Throated Snerdelbird.\"~])",
			"type": "wooden_shelves_big_books2",
			"x": 480,
			"y": 448
		},
		{
			"_uuid": "9ca9918039fe4d68a85873d13ac6d8a4",
			"current_frame": "normal",
			"custom": true,
			"label": "mortimer_mole",
			"on_golden_ant_tease": "if(level.player is obj frogatto_playable, if(not level.player.get_stored_event('mortimer_juggled_golden_ant_tease') = 1,
										[
											schedule(10, transient_speech_dialog(self, 300,
												[~Look, either give me the ant or don't.\\nI can't stand this!~]
											)),
											schedule(10,
												set(self.animation, 'talk_happy'),
											),
											level.player.store_event('mortimer_juggled_golden_ant_tease',1)
										]
									))",
			"on_juggled_non_ant": "if(level.player is obj frogatto_playable, if(not level.player.get_stored_event('mortimer_juggled_non_ant') = 1,
										[
											schedule(10, transient_speech_dialog(self, 300,
												[~What goes in, usually comes out...\\nBut who knows?~],
												//set(self.animation, 'talk_happy'),
												[~Someday a golden ant might pop out.~]
											)),
											schedule(10,
												set(self.animation, 'talk_pensive'),
											),
											schedule(50,
												set(self.animation, 'talk_happy'),
											),
											level.player.store_event('mortimer_juggled_non_ant',1)
										]
									))",
			"on_juggled_other_ant": "if(level.player is obj frogatto_playable, if(not level.player.get_stored_event('mortimer_juggled_other_ant') = 1,
										[
											schedule(10, transient_speech_dialog(self, 300,
												[~I don't think that's how golden ants are made.~]
											)),
											schedule(10,
												set(self.animation, 'talk_pensive'),
											),
											level.player.store_event('mortimer_juggled_other_ant',1)
										]
									))",
			"on_received_event": "debug('here')",
			"on_talk": "[
				if((not frogatto.get_stored_event('mortimer_said_he_wants_the_gold_ant')),
						
						if((frogatto.swallowed_object and frogatto.swallowed_object.type in ['ant_gold', 'ant_gold.thrown']),
		speech_dialog(frogatto.store_event('mortimer_said_he_wants_the_gold_ant', 1),
							set(mortimer.animation, 'talk_raisedfinger'),
				mortimer,	[~Hello there.~],
							set(frogatto.animation, 'emote_raisedfinger'),
				frogatto,	[~^Hi, I'm Frogatto.~],
							set(mortimer.animation, 'talk'),
				mortimer,	[~A pleasure to meet you.\\nI am Mortimer.~],
							set(frogatto.animation, 'emote_talk'),
				frogatto,	[~^That's nice.~],
							set(frogatto.animation, 'emote_confused'),
							[~Uhm, I hope you don't mind my asking,\\nbut what on earth <em>are</em> you, anyway?~],
							set(mortimer.animation, 'talk_pensive'),
				mortimer,	[~Ostensibly, I am a mole.~],
							set(frogatto.animation, 'emote_talk'),
				frogatto,	[~...\\nOkay.~],
							set(mortimer.animation, 'talk_expound'),
				mortimer,	[~Perhaps more importantly, I am a bit of\\nan astronomer and biologist, by trade.~],
							set(mortimer.animation, 'talk_raisedfinger'),
							[~That is why I live all the way up here.\\nYou can see quite a bit from this height.~],
							set(frogatto.animation, 'emote_talk'),
				frogatto,	[~...and I guess you have these\\nants in cages to study them?~],
							set(mortimer.animation, 'talk_raisedfinger'),
				mortimer,	[~That's right.  Unfortunately,\\nmy collection lacks the rarer golden ant.~],
							set(frogatto.animation, 'emote_talk'),
				frogatto,	[~Oh.	 I've got one of those.~],
							set(mortimer.animation, 'talk_happy'),
				mortimer,	[~<em>YOU DO???</em>~],
							set(frogatto.animation, 'emote_geez'),
				frogatto,	[~Whoa.  Calm down, guy.\\nIt's only a crazy-rare insect.~],
							set(mortimer.animation, 'talk_expound'),
				mortimer,	[~My apologies.\\nMy excitement got the better of me.~],
							set(mortimer.animation, 'talk'),
				mortimer,	[~Would you perchance be willing\\nto donate it to my collection?~],
							set(frogatto.animation, 'emote_geez'),
				frogatto,	[~I dunno.  Goober and I have a bond\\nstronger than the mists of time.~],
							set(mortimer.animation, 'talk_pensive'),
				mortimer,	[~He will not be harmed, and I will reward you\\nhandsomely for your contributions to science.~],
							set(frogatto.animation, 'emote_raisedfinger'),
				frogatto,	[~Handsomely, you say?\\nHe's all yours!~],
							set(mortimer.animation, 'talk_raisedfinger'),
				mortimer,	[~Splendid!  How soon can you get him to me?~],
							set(frogatto.animation, 'emote_confused'),
				frogatto,	[~What do you mean?\\nHe's right here.~],
							set(mortimer.animation, 'talk_pensive'),
				mortimer,	[~I... don't see a golden ant.~],
							set(frogatto.animation, 'idle_croak'),
				frogatto,	[~He's in my stomach!~],
							set(mortimer.animation, 'talk_raisedfinger'),
				mortimer,	[~Oh my, I thought you were just portly.\\nYou carry a golden ant with you at all times?~],
							set(frogatto.animation, 'emote_nod'),
				frogatto,	[~Yup!  Gotta be prepared.~],
							set(mortimer.animation, 'talk_pensive'),
				mortimer,	[~In your <em>stomach?</em>~],
							set(frogatto.animation, 'emote_geez'),
				frogatto,	[~Well, it's not like I have pockets.~],
							set(frogatto.animation, 'emote_talk'),
				frogatto,	[~Besides, I never actually digest anything\\nunless I consciously try.~],
							set(mortimer.animation, 'talk_happy'),
				mortimer,	[~What... how... just spit him into the empty cage.~],
							set(mortimer.animation, 'talk_expound'),
				mortimer,	[~Iâ€¦ will want to ask you about that later,\\nbut this is altogether too much at once!~],
							set(frogatto.animation, 'emote_raisedfinger'),
				frogatto,	[~Okay!  Goodbye Goober!\\nI'll always love you!~],
							set(mortimer.animation, 'talk_happy'),
				mortimer,	[~What a day!~],
			),
	  speech_dialog(frogatto.store_event('mortimer_said_he_wants_the_gold_ant', 1),
							set(mortimer.animation, 'talk_raisedfinger'),
				mortimer,	[~Hello there.~],
							set(frogatto.animation, 'emote_raisedfinger'),
				frogatto,	[~^Hi, I'm Frogatto.~],
							set(mortimer.animation, 'talk'),
				mortimer,	[~A pleasure to meet you.\\nI am Mortimer.~],
							set(frogatto.animation, 'emote_talk'),
				frogatto,	[~^That's nice.~],
							set(frogatto.animation, 'emote_confused'),
							[~Uhm, I hope you don't mind my asking,\\nbut what on earth <em>are</em> you, anyway?~],
							set(mortimer.animation, 'talk_pensive'),
				mortimer,	[~Ostensibly, I am a mole.~],
							set(frogatto.animation, 'emote_talk'),
				frogatto,	[~...\\nOkay.~],
							set(mortimer.animation, 'talk_expound'),
				mortimer,	[~Perhaps more importantly, I am a bit of\\nan astronomer and biologist, by trade.~],
							set(mortimer.animation, 'talk_raisedfinger'),
							[~That is why I live all the way up here.\\nYou can see quite a bit from this height.~],
							set(frogatto.animation, 'emote_talk'),
				frogatto,	[~...and I guess you have these\\nants in cages to study them?~],
							set(mortimer.animation, 'talk_expound'),
				mortimer,	[~That's right.  Unfortunately,\\nmy collection lacks the rarer golden ant.~],
							set(frogatto.animation, 'emote_talk'),
				frogatto,	[~Oh, what a shame.~],
							set(mortimer.animation, 'talk_pensive'),
				mortimer,	[~You know, you look rather well-traveled.\\nIf you could bring me a golden ant...~],
							set(mortimer.animation, 'talk'),
							[~...and toss it in one of my cages,\\nI'd reward you <em>handsomely.</em>~],
							set(frogatto.animation, 'emote_raisedfinger'),
				frogatto,	[~Handsomely you say?\\nI'm on it!~]
	))),
							
	if(frogatto.get_stored_event('mortimer_said_he_wants_the_gold_ant') = 1 and (not frogatto.get_stored_event('mortimer_saw_that_we_got_the_gold_ant') = 1),
	   if(frogatto.get_stored_event('got_gold_ant') = 1,
		speech_dialog(
							set(mortimer.animation, 'talk_happy'),
				mortimer,	[~Oh! You got the golden ant for me.\\nIt's beautiful, <em>beautiful!</em>~],
							set(frogatto.animation, 'emote_geez'),
				frogatto,	[~Mmmmmhmmmm.\\nNow you were talking about a <em>reward?</em>~],
							set(mortimer.animation, 'talk_pensive'),
				mortimer,	[~Yes, yes, a reward!\\nI think I have just the thing.~],
							set(mortimer.animation, 'talk_raisedfinger'),
							[~Being that you are also a keen explorer\\nof our natural world, I've come across certain\\ntools that can help you.~],
							set(mortimer.animation, 'talk_pensive'),
							[~Now, what would an explorer need, hmm?~],
							set(mortimer.animation, 'talk_happy'),
							[~Well, a classical thing that's\\nlovely to have is <em>a map</em>.~],
							set(mortimer.animation, 'talk_expound'),
							[~I have one, in fact...\\nin fact I have a very <em>unusual</em> one.~],
							set(level.focus, [get_object_or_die(level,'the_treasure')]),
							set(mortimer.animation, 'talk_pensive'),
							[~It's been sitting idle in that chest\\nfor months, now. Rather a waste, really.~],
							set(level.focus, []),
							set(mortimer.animation, 'talk_raisedfinger'),
							[~You see, this is a magic map.\\nIt draws itself!~],
							set(frogatto.animation, 'emote_oh'),
				frogatto,	[~Really!~],
							set(mortimer.animation, 'talk_happy'),
				mortimer,	[~Yes, it's quite delightful.\\nAlso indispensable.~],
							set(mortimer.animation, 'talk_expound'),
							[~So by all means, help yourself.\\nIt's the least I can do for you.~],
							set(mortimer.animation, 'talk'),
							[~Good luck,\\nand I hope it serves you well!~],
							frogatto.store_event('mortimer_saw_that_we_got_the_gold_ant', 1),
							spawn('padlock_key',mid_x,mid_y - 50,{valid_levels: ['secluded-hut-interior.cfg'], color:'gold'})
					),
		if(frogatto.swallowed_object and frogatto.swallowed_object.type in ['ant_gold', 'ant_gold.thrown'],
		speech_dialog(self, [~Oh <em>my!</em> If that's a golden ant in your stomach,\\nthen quick, spit it out into the cage!~]),
		speech_dialog(self, [~I don't suppose you've had any\\nluck with getting a golden ant yet?~],
				  set(frogatto.animation, 'emote_geez'),
				  frogatto, [~I'm working on it.\\nYou said, yourself, that they're hard to find.~]
	   )))),
	 if(frogatto.get_stored_event('mortimer_saw_that_we_got_the_gold_ant') = 1,
		if(frogatto.get_stored_event('secluded_hut_treasure_chest_unlocked') = null,
		   speech_dialog(self,		
							set(mortimer.animation, 'talk_pensive'),
							[~Say, you <em>are</em> intending to open that chest, right?~],
							set(frogatto.animation, 'emote_geez'),
				frogatto,	[~I'mâ€¦ what now?~],
							set(mortimer.animation, 'talk'),
				mortimer,	[~You left the key here last time.\\nGo.  Go open that chest down there.~],
							set(level.focus, [get_object_or_die(level,'the_treasure')]),
							set(mortimer.animation, 'talk_expound'),
							[~It's a gift to youâ€¦ please do take it.\\nThere's no shame in doing so.~],
							set(level.focus, []),
							if((not find(level.chars, 'c', c.type in ['padlock_key'])) and if(frogatto.swallowed_object != null, (not frogatto.swallowed_object is obj padlock_key), true), 
								spawn('padlock_key',mid_x,mid_y - 50,{valid_levels: ['secluded-hut-interior.cfg'], color:'gold'})
							),

					),
		   speech_dialog(
		   		mortimer,
							set(mortimer.animation, 'talk_raisedfinger'),
		   					[~I do hope you are enjoying exploring the island.\\nThere are <em>so</em> many wonderful creatures on it.~],
							set(frogatto.animation, 'emote_geez'),
				frogatto,	[~... most of which seem inclined to kill me.~])))
	]	where frogatto = (obj frogatto_playable <- level.player)
		where mortimer = self",
			"on_too_many_ants": "
				if(level.player is obj frogatto_playable,
					if(not level.player.get_stored_event('mortimer_juggled_golden_ant_tease') = 1,
						[
							schedule(10, [
								set(mortimer.animation, 'talk_expound'),
								transient_speech_dialog(mortimer, 300,
									[~I only wanted one.\\nI'm not studying their mating habits.~]
								)
							]),
							level.player.store_event('mortimer_juggled_golden_ant_tease',1)
						]
					)
				)
										
			where mortimer = self",
			"property_data": {
				"consider_object": "[if(obj.basic_type ='ant_gold',
												if(level.player.get_stored_event('got_gold_ant') = 1, 
													fire_event(morty,'too_many_ants'),
													if(obj.juggled > 3
														and level.player.get_stored_event('mortimer_said_he_wants_the_gold_ant') = 1,
															fire_event(morty, 'golden_ant_tease'))),
												if(obj.juggled > 3, 
													if(strstr(obj.basic_type, 'ant_'),
														fire_event(morty, 'juggled_other_ant'),
														fire_event(morty, 'juggled_non_ant'))))
											where morty = me]"
			},
			"type": "mortimer_npc",
			"x": 608,
			"y": 121
		},
		{
			"_uuid": "341fe6414ee94820a16b3d9b77258cb7",
			"current_frame": "normal",
			"custom": true,
			"label": "_9e37dfc",
			"on_triggered": "[transient_speech_dialog(get_object_or_die(level,'mortimer_mole'), [~I say! Who's there?~]),die()]",
			"property_data": {
				"_x2_bound": 1092,
				"_x_bound": 569,
				"_y2_bound": 736,
				"_y_bound": 336
			},
			"type": "level_controller",
			"x": 448,
			"y": 416
		},
		{
			"_uuid": "82d12d41af2d46d1a4185838610450e8",
			"current_frame": "normal",
			"custom": true,
			"label": "_1f7f42e2",
			"type": "metal_cage",
			"x": 117,
			"y": 103
		},
		{
			"_uuid": "fe02cf96d3664a5b8a4c9e5a51d6e527",
			"collide_dimensions": "level_only",
			"current_frame": "normal",
			"custom": true,
			"label": "_534347a9",
			"on_timer": "if(facing > 0 and x > 485 or facing < 0 and x < 452, [set(facing, -facing), animation('turn')])",
			"solid_dimensions": "level_only",
			"type": "ant_red",
			"x": 478,
			"y": 128,
			"zorder": -5
		},
		{
			"_uuid": "c7b1b6cd357648328929095239a91516",
			"collide_dimensions": "level_only",
			"current_frame": "normal",
			"custom": true,
			"label": "_534347a8",
			"on_timer": "if(facing > 0 and x > 160 or facing < 0 and x < 126, [set(facing, -facing), animation('turn')])",
			"solid_dimensions": "level_only",
			"type": "ant_black",
			"x": 128,
			"y": 128,
			"zorder": -5
		},
		{
			"_uuid": "8b25725a2a604baca7131435f412ffb7",
			"current_frame": "normal",
			"custom": true,
			"label": "_4ab26e78",
			"type": "metal_cage",
			"x": 437,
			"y": 102
		},
		{
			"_uuid": "12cd6b4b842e461d812eb7225e1220cc",
			"collide_dimensions": "enemy,~enemy",
			"current_frame": "normal",
			"custom": true,
			"label": "empty_cage",
			"on_add_ant": "if(captive_object != null, [level.player.store_event('got_gold_ant', 1), add_object(captive_object), set(captive_object, null)])",
			"on_collide_object_cage": "if(captive_object != null and level.player.get_stored_event('mortimer_said_he_wants_the_gold_ant') = 1 and arg.collide_with_area = 'thrown',
				if(collide_with.basic_type = 'ant_gold',
					[spawn('die_cloud', collide_with.midpoint_x, collide_with.midpoint_y, facing),
						spawn('die_cloud', captive_object.midpoint_x, captive_object.midpoint_y, facing),
						remove_object(collide_with), fire_event('add_ant')],
						if(collide_with.basic_type in ['ant_red','ant_black','ant_platform_red'] and (not level.player.get_stored_event('got_mortimer_the_wrong_ant')),
							[level.player.store_event('got_mortimer_the_wrong_ant', 1), schedule(10,
									speech_dialog(
																	set(level.player.facing, sign(mortimer.mid_x - level.player.mid_x)),
																	set(mortimer.animation, 'talk_expound'),
													mortimer,		[~I... do believe I had specified\\nthat I wanted a <em>golden</em> ant?~],
																	set(level.player.animation, 'emote_nod'),
													level.player,	[~Sure, there you go.\\nYou were talking about a reward?~],
																	set(mortimer.animation, 'talk_pensive'),
													mortimer,		[~Well, I'm afraid I can't work with that.\\nBut wait a second...~],
																	[~...~],
																	set(mortimer.animation, 'talk_raisedfinger'),
																	[~Could it be that frogs don't see color\\nin the usual way?~],
																	set(mortimer.animation, 'talk_pensive'),
																	[~Oh, this is embarrassing.~],
																	set(mortimer.animation, 'talk'),
																	[~That was an unreasonable assumption\\nI had on how your visual system operates.~],
																	set(mortimer.animation, 'talk_happy'),
																	[~Thus, if you were so inclined,\\nit would be a most fascinating experience...~],
																	set(mortimer.animation, 'talk'),
																	[~...if I were able to study your eyeballs\\nand visual cortex in <em>greater detail.</em>~],
																	set(level.player.animation, 'idle_eyeball'),
													level.player,	[~What, these old things?~],
																	set(mortimer.animation, 'talk_pensive'),
													mortimer,		[~Sweet mother of... did you just...~],
																	set(level.player.animation, 'emote_talk'),
													level.player,	[~Normally, I'd gladly give them to anyone who asked...~],
																	set(level.player.animation, 'emote_raisedfinger'),
													level.player,	[~But I've got some pretty important stuff\\nto look at in the near future.~],						   
																	set(mortimer.animation, 'talk_pensive'),
													mortimer,		[~Ah, I didn't want to imply that.\\nYes, I'm aware that'd be quite impossible right now.~], 		
																	set(mortimer.animation, 'talk_raisedfinger'),
																	[~Besides, I already have my hands full\\njust in studying these ants.~],
																	set(mortimer.animation, 'talk_pensive'),
																	[~The point is,\\nI am <em>really</em> sorry for asking you to embark\\non such a fruitless snipe hunt.~],
																	/*probably to be replaced for a laugh emote in the future*/
																	set(level.player.animation, 'emote_nod'),
													level.player,	[~Oh no, don't feel bad.  I was just pulling your leg.~],
																	set(level.player.animation, 'emote_talk'),
																	[~I'll go fetch you an <em>actual</em> golden ant, right away.~]
																	)
									   
									   
									where mortimer = get_object_or_die(level, 'mortimer_mole'))]
						))) where collide_with = (obj hittable <- arg.collide_with)",
			"on_start_level": "if(level.player.get_stored_event('got_gold_ant') = 1, fire_event('add_ant'))",
			"property_data": {
				"captive_object": "@eval deserialize('b966041027274e829a84139c57ddf164')"
			},
			"type": "metal_cage",
			"x": 276,
			"y": 103
		},
		{
			"_uuid": "b7adffebbc7142638219560e7698328b",
			"current_frame": "normal",
			"custom": true,
			"face_right": false,
			"is_human": true,
			"label": "_b54e53b",
			"type": "frogatto_playable",
			"x": 960,
			"y": 130
		},
		{
			"_uuid": "5c2dc400adc14eee87da2ae72050b63a",
			"current_frame": "normal",
			"custom": true,
			"label": "_4da0d59e",
			"type": "kitchen_sink",
			"x": 576,
			"y": 64
		},
		{
			"_uuid": "1b91a7b2991444e991ce2751de08a93e",
			"current_frame": "normal",
			"custom": true,
			"face_right": false,
			"label": "_50d1d19f",
			"type": "fishbowl",
			"x": 1291,
			"y": 11
		},
		{
			"_uuid": "a50927e9453d4c2e84fdb5ee0c3c121b",
			"current_frame": "normal",
			"custom": true,
			"face_right": false,
			"label": "_69217667",
			"type": "broom",
			"x": 96,
			"y": 96
		},
		{
			"_uuid": "0756c04f2d594c579fbca6731683dd4f",
			"current_frame": "normal",
			"custom": true,
			"label": "_718038f8",
			"type": "seaside_interior_window",
			"x": 1376,
			"y": 448
		},
		{
			"_uuid": "563c2dbeda5a459ab7ad1230983931e9",
			"current_frame": "normal",
			"custom": true,
			"label": "_6b01f388",
			"type": "seaside_interior_window",
			"x": 1216,
			"y": 448
		},
		{
			"_uuid": "e549dcf0028842a783ce404d8af63981",
			"current_frame": "normal",
			"custom": true,
			"label": "_ecc3268",
			"type": "seaside_interior_window_large",
			"x": 1280,
			"y": -96
		},
		{
			"_uuid": "4848f65bf8a548aebcfa12a0a8fef2bf",
			"current_frame": "normal",
			"custom": true,
			"label": "_507afbe1",
			"type": "seaside_interior_window_large",
			"x": 1024,
			"y": -96
		},
		{
			"_uuid": "7ee4c8524d5746759ad437e827c56875",
			"current_frame": "normal",
			"custom": true,
			"label": "_4216724",
			"type": "seaside_interior_window_large",
			"x": 544,
			"y": -96
		},
		{
			"_uuid": "58a29e368302436983f205f682ddc322",
			"current_frame": "normal",
			"custom": true,
			"label": "_2f779834",
			"type": "seaside_interior_window_large",
			"x": 288,
			"y": -96
		},
		{
			"_uuid": "394e9f7cc20942b1b5f71a436601e6f6",
			"current_frame": "normal",
			"custom": true,
			"label": "_714e8e01",
			"property_data": {
				"sound_file": "ambient/house-interior-seaside.ogg"
			},
			"type": "sound_source_constant",
			"x": 736,
			"y": -32
		},
		{
			"_uuid": "15c9628c1d59439b8dd38f80147480bc",
			"current_frame": "normal",
			"custom": true,
			"label": "the_treasure",
			"property_data": {
				"event_name": "secluded_hut_treasure_taken",
				"spawn_properties": {
					"kind": "@eval enum item_magic_map"
				},
				"spawn_type": "generic_acquirable_inventory_item"
			},
			"type": "treasure_chest",
			"x": 1088,
			"y": 576
		},
		{
			"_uuid": "56b6bbb8b60f4548a56b6d9217120f91",
			"current_frame": "normal",
			"custom": true,
			"label": "_3d0f374a",
			"property_data": {
				"color": "gold",
				"event_name": "secluded_hut_treasure_chest_unlocked"
			},
			"type": "padlock",
			"x": 1137,
			"y": 631
		},
		{
			"_uuid": "596e1cfd9a6f4c2b80ac58e18eefc2fa",
			"current_frame": "normal",
			"custom": true,
			"label": "_48b6da4f",
			"type": "vase_grey_throwable_respawning",
			"x": 636,
			"y": 60
		},
		{
			"_uuid": "82d1ebfa2e134a9bbe042b57ae4cc60d",
			"current_frame": "normal",
			"custom": true,
			"label": "left_door",
			"type": "seaside_house_interior_door_large",
			"property_data": {
				"_dest_door": "left_door",
				"_dest_level": "secluded-hut.cfg",
				"_goes_to_illuminated_place": true
			},
			"x": 369,
			"y": 480
		}
	],
	"dimensions": [0,-320,1793,832],
	"id": "secluded-hut-interior.cfg",
	"music": "FrogattoChill.ogg",
	"palettes": ["chrome_to_brass","interior_seaside_rustic"],
	"preloads": "",
	"segment_height": 0,
	"segment_width": 0,
	"serialized_objects": {
		"character": [
			{
				"_uuid": "b966041027274e829a84139c57ddf164",
				"collide_dimensions": "level_only",
				"current_frame": "normal",
				"custom": true,
				"label": "_534347a7",
				"on_timer": "if(facing > 0 and x > 315 or facing < 0 and x < 296, [set(facing, -facing), animation('turn')])",
				"solid_dimensions": "level_only",
				"type": "ant_gold",
				"x": 278,
				"y": 128,
				"zorder": -5
			}
		]
	},
	"set_screen_resolution_on_entry": false,
	"tile_map": [
		{
			"tiles": ",,,,,,,,,,,,,,,,,,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins
,,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins
,,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins
,,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins
,,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins
,,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins
,,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins
,,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins
,,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins
,,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins
,,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins
,,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins
,,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins
,,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins
,,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins
,,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins
,,,,,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins
,,,,,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins
,,,,,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins
,,,,,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins
,,,,,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins
,,,,,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins
,,,,,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins
,,,,,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins
,,,,,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins
,,,,,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins
,,,,,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins
,,,,,,,,,,,,,,,,,,,,,,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins
,,,,,,,,,,,,,,,,,,,,,,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins
,,,,,,,,,,,,,,,,,,,,,,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins,ins
,
,",
			"unique_tiles": ",ins",
			"variations": "",
			"x": 0,
			"x_speed": 100,
			"y": -224,
			"y_speed": 100,
			"zorder": "interior_background_tiles"
		},
		{
			"tiles": "int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int
int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int
int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int
int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int
int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int
int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int
int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int
int,int,int,int,int,int,int,int,int,int,,,,,,,,int,int,,,,,,,,int,int,int,int,int,int,int,,,,,,,,int,int,,,,,,,,int,int,int,int,int,int,int,int,int,int,int,int
int,int,int,int,int,int,int,int,int,,,,,,,,,,,,,,,,,,,int,int,int,int,int,,,,,,,,,,,,,,,,,,,int,int,int,int,int,int,int,int,int,int,int
int,int,int,int,int,int,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,int,int,int,int,int,int,int
int,int,int,int,int,int,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,int,int,int,int,int,int,int
int,int,int,int,int,int,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,int,int,int,int,int,int,int
int,int,int,int,int,int,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,int,int,int,int,int,int,int
int,int,int,int,int,int,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,int,int,int,int,int,int,int
int,int,int,int,int,int,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,int,int,int,int,int,int,int
int,int,int,int,int,int,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,int,int,int,int,int,int,int
int,int,int,int,int,int,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,int,int,int,int,int,int,int
int,int,int,int,int,int,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,int,int,int,int,int,int,int
int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,,,,,,,,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int
int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,,,,,,,,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int
int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,,,,,,,,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int
int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,,,,,,,,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int
int,int,int,int,int,int,int,int,int,,,,,,,,,,,,,,,,int,int,,,,,,,,int,int,,,,,,,,,,,,,,,,,,,int,int,int,int,int,int,int,int
int,int,int,int,int,int,int,int,int,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,int,int,int,int,int,int,int,int
int,int,int,int,int,int,int,int,int,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,int,int,int,int,int,int,int,int
int,int,int,int,int,int,int,int,int,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,int,int,int,int,int,int,int,int
int,int,int,int,int,int,int,int,int,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,int,int,int,int,int,int,int,int
int,int,int,int,int,int,int,int,int,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,int,int,int,int,int,int,int,int
int,int,int,int,int,int,int,int,int,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,int,int,int,int,int,int,int,int
int,int,int,int,int,int,int,int,int,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,int,int,int,int,int,int,int,int
int,int,int,int,int,int,int,int,int,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,int,int,int,int,int,int,int,int
int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,,,,,,,,,,,,,,,,,,int,int,int,int,int,int,int,int
int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,,,,,,,,,,,,,,,,,int,int,int,int,int,int,int,int
int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int
int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int
int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int
int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int
int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int
int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int
int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int",
			"unique_tiles": ",int",
			"variations": "",
			"x": -96,
			"x_speed": 100,
			"y": -384,
			"y_speed": 100,
			"zorder": "interior_solid_ground_tiles"
		},
		{
			"tiles": ",,,,,,,,,,,,,,,,,,,,,,,,,iel,iel,iel
,,,,,,,,,,,,,,,,,,,,,,,,,iel,iel,iel
,,,,,,,,,,,,,,,,,,,,,,,,,iel,iel,iel
,,,,,,,,,,,,,,,,,,,,,,,,,iel,iel,iel
,,,,,,,,,,,,,,,,,,,,,,,,,iel,iel,iel
,,,,,,,,,,,,,,,,,,,,,,,,,iel,iel,iel
,,,,,,,,,,,,,,,,,,,,,,,,,iel,iel,iel
,,,,,,,,,,,,,,,,,,,,,,,,,iel,iel,iel
,,,,,,,,,,,,,,,,,,,,,,,,,iel,iel,iel
,,,,,,,,,,,,,,,,,,,,,,,,,iel,iel,iel
,,,,,,,,,,,,,,,,,,,,,,,,,iel,iel,iel
,,,,,,,,,,,,,,,,,,,,,,,,,iel,iel,iel
,,,,,,,,,,,,,,,,,,,,,,,,,iel,iel,iel
,,,,,,,,,,,,,,,,,,,,,,,,,iel,iel,iel
,,,,,,,,,,,,,,,,,,,,,,,,,iel,iel,iel
,,,,,,,,,,,,,,,,,,,,,,,,,iel,iel,iel
,,,,,,,,,,,,,,,,,,,,,,,,,iel,iel,iel
,,,,,,,,,,,,,,,,,,,,,,,,,iel,iel,iel
,,,,,,,,,,,,,,,,,,,,,,,,,iel,iel,iel
,
,",
			"unique_tiles": ",iel",
			"variations": "",
			"x": 0,
			"x_speed": 100,
			"y": 0,
			"y_speed": 100,
			"zorder": "elevator_shafts"
		}
	],
	"title": "Secluded Hut",
	"touch_controls": true,
	"vars": {
	},
	"version": "1.4",
	"water_resistance": 100,
	"xscale": 100,
	"yscale": 100
}
