{
id: "buyable_item",
zorder: "@include data/zorder.cfg:interior_decor",
is_strict: true,
prototype: ["item_acquirable"],
respawns: true,
properties: {
#-------------------------- general accessors --------------------------#
	frogatto: "(obj frogatto_playable <- level.player)",
	item_info: "class inventory_item :: frogatto.item_info(item_id)",

	number_owned: "int :: frogatto.number_of_item(item_id)",
	max_owned: "int :: item_info.count_limit",

	//real_item_name: "string :: regex_replace(type,'buyable_','')",


#-------------------------- item metadata --------------------------#
	final_price: "int :: price", // * (1 + number_owned)",  //<---  TODO?  Some sort of exponential cost increase?
	quantity_being_sold_per_buy: "int :: 1",
	price: "int :: item_info.price",
	costs_trophies_instead_of_coins: "bool :: item_info.costs_trophies_instead_of_coins",
	short_item_name: "string :: lower(item_info.name)",
	short_store_description: "[string] :: item_info.short_store_description",

	item_id: "InventoryItemType :: enum item_generic_usable",

	available_trophy: "class inventory_item|null :: frogatto.available_trophy",

#-------------------------- cosmetics --------------------------#
	bob_offset: { type: "int", default: 10, persistent: false },


#-------------------------- item_acquirable settings --------------------------#
	should_lock_player_and_do_fancy_acquisition_interlude: "bool :: true",


#-------------------------- eligibility checks --------------------------#
	does_player_have_required_element_to_buy_this: "bool :: if(item_info.item_element_type = null,
		true,
		item_info.item_element_type in frogatto.elements_owned_by_player
	)",


#-------------------------- transaction processing --------------------------#
	core_conversation_mechanics: "commands ::
		[
			set(level.player.time_in_animation_delta, 0),
			if(costs_trophies_instead_of_coins,
				conversation_for_trophy_priced_items,
				conversation_for_coin_priced_items
			),
			set(level.player.time_in_animation_delta, 1)
		]",


		//these conversations are a bit more generic, because these items can be in multiple stores.
	conversation_for_coin_priced_items: "commands ::
		if(level.player.coins < final_price,
			[
				speech_dialog(self, short_store_description + [~The price is ${final_price} coins.\\nYou don't have enough money.~]),
			],
			[
				speech_dialog(self, short_store_description + [~The price is ${final_price} coins.~]),
				speech_dialog(self, [~Do you want to buy the ${short_item_name}?~,
					~Yes~,	[
						fire_event('bought'),
						sound('coins-buy.wav'),
						set(level.player.coins, level.player.coins - final_price),
						spawn('text_flash_negative',midpoint_x,midpoint_y-20,1,[set(child.txt,'-'+me.final_price)])
						],
					'default_skip', ~No~, []
				])
			]
		)",
		
		//the trophy conversations always come from Prospera, so they're tuned to be a bit more in her 'voice'.	
	conversation_for_trophy_priced_items: "commands ::
		if(available_trophy = null,
			[
				speech_dialog(self, short_store_description + [~But, since you don't have a trophy right now,\\nwe'll put that on hold for the time being.~]),
			],
			if(not does_player_have_required_element_to_buy_this,
				[
					speech_dialog(self, short_store_description + [~However, you don't have the elemental magic\\nI'd need to make this work.~,~Once you get your first talisman of this type,\\ncome back and try again.~]),
				],
				[
					speech_dialog(self, short_store_description + [~I'm willing to trade this for\\none of those golden trophies.~]),
					speech_dialog(self, [~Do we want to make a deal?~,
						~Yes~,	[
							fire_event('bought'),
							sound('coins-buy.wav'),
							frogatto.add_item( available_trophy.id, -1),
							spawn('text_flash_negative',midpoint_x,midpoint_y-20,1,[set(child.txt,'- one trophy')])
							],
						'default_skip', ~No~, []
					])
				]
			)
		)",
	
	
	remove_item_if_appropriate: "commands :: if((number_owned + 1) >= max_owned,  //Note:  The +1 is because the item doesn't count as acquired at the time of execution.
		schedule(removal_time, die()),
		[
			schedule(removal_time, die()),
			spawn(me.type, me.mid_x, me.mid_y, {settable_item_id: me.settable_item_id}),
		]
	)", 
},

on_create: "[if(number_owned >= max_owned, remove_object(me)),set(bob_offset, 1d100)]",
on_interact: "[fire_event(level.player, 'start_interact')]",
on_acquired: "frogatto.add_item(item_id, quantity_being_sold_per_buy)",
on_bought: "do_acquisition",
on_talk: "core_conversation_mechanics",
on_end_anim: "set(animation,animation)",

on_process: "if(not been_acquired, set(velocity_y, 50*sin((bob_offset + cycle)*5+(0.5*1d2))))",

animation: {
	id: "normal",
	interact_area: "all",
},
}
