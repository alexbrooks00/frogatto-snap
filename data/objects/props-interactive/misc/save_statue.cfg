{
id: "save_statue",
dies_on_inactive: false,
zorder: "@include data/zorder.cfg:exterior_decor",
prototype: ["transient_object"],
editor_info: {
	category: "props",
},

properties: {
	activate:  "commands :: [
					set(_last_triggered,cycle),
				    visually_activate,
				    audibly_activate,
				    save_game(),
				    checkpoint_game(),
					title(~The game has been saved.~),
					set(_player_has_left_bounds, false),
					map(filter(level.chars, value is obj save_statue and value != me), value.deactivate),
					update_death_streak_status
				]",	


		/*
			check to see if we've triggered a checkpoint that's actually different than the last one the player saved at - if we have, then we consider the player to be back on the "grace" of doing a no-death run, which we can use to unlock bonuses like secret areas.
			
			We compare both level id and object label to prevent the rare case (probably due to copypasta) where two save statues on different levels share the same label; and also to prevent same-level save statues from overriding each other.
		*/
	open_secret_areas: "commands :: map(filter(level.chars, value is obj secret_passage_controller), fire_event(value, 'level_tiles_refreshed'))",
		
	update_death_streak_status: "commands :: 
					if(globals.last_unique_checkpoint_label != null and globals.last_unique_checkpoint_level_name != null,
						if(globals.last_unique_checkpoint_label != me.label or globals.last_unique_checkpoint_level_name != level.id,
							[
								set(globals.last_unique_checkpoint_label, me.label),
								set(globals.last_unique_checkpoint_level_name, level.id),
								set(globals.player_has_died_since_last_unique_checkpoint, false),
							
								set(frogatto.last_unique_checkpoint_label, me.label),
								set(frogatto.last_unique_checkpoint_level_name, level.id),
								set(frogatto.player_has_died_since_last_unique_checkpoint, false),
								
								open_secret_areas
							]
						),
						[
							set(globals.last_unique_checkpoint_label, me.label),
							set(globals.last_unique_checkpoint_level_name, level.id),
							set(globals.player_has_died_since_last_unique_checkpoint, false),
							
							set(frogatto.last_unique_checkpoint_label, me.label),
							set(frogatto.last_unique_checkpoint_level_name, level.id),
							set(frogatto.player_has_died_since_last_unique_checkpoint, false),
							
							open_secret_areas
						]
					) where frogatto = (obj frogatto_playable <- level.player)",


	visually_activate: "[
					_particles.turn_on,
					add_object(_fire_glow),
				]",
				
	audibly_activate: "[
					lib.sound.play_sound(me,'SaveFrog.ogg'),
				]",
				
	deactivate: "commands :: [
					_particles.turn_off,
					remove_object(_fire_glow),
				]",

	is_player_within_bounds:  "bool :: (level.player.mid_x > _x_bound and level.player.mid_x <_x2_bound and level.player.mid_y > _y_bound and level.player.mid_y < _y2_bound and level.player.hitpoints > 0)",
	
	has_not_triggered_recently: "bool :: (me.cycle - _last_triggered > 100)",

	/*
		Somewhat non-obvious; we use the rectangular area (assumed to be really close and tight, and to cover e.g. vertical passageways completely) to handle triggering the save.  However, to handle "making it possible to re-trigger this save point", we use a much wider, much more greedy circular radius.  Essentially all this is for is to prevent spamming the "game has been saved" message over and over if the player stands/walks near a save point.
	*/
	player_is_near_statue: "def(obj save_statue the_statue, int dist) -> bool lib.math.length(level.player,the_statue) < dist",
	
#-------------------------- visual fx --------------------------#
	_particles: {
		type: "obj legacy_particle_attache",
		init: "object('legacy_particle_attache', mid_x, mid_y, {
			_particle_type: 'save_statue_fire',
			zorder: me.zorder + 1,
			parent: me,
			time_to_die: 200,
			custom_relative_pos_default: {mid_x: 0, mid_y: -10},
			variable_name: '_particles',
		})",
		persistent: false,
	},

	_fire_glow: {
		type: "obj effects_attache_glow_source",
		init: "object('effects_attache_glow_source', mid_x, mid_y, {
			time_to_die: 0,
			parent: me,
			custom_relative_pos_default: {mid_x: 0,	mid_y: 10},
			base_alpha: 160,
			flicker_type: enum sputter,
			graphics: enum firey,
			scale_factor: 0.25,
			zorder:  int<-lib.json.get_document_map('data/zorder.cfg').near_player_foreground_effects,
			variable_name: '_fire_glow',
		})",
		persistent: false,
	},
	

#-------------------------- constructors --------------------------#

	/*
		Do note that we have to do some really weird business in this object, because this is an obscenely "rare bird" that actually cares about the fact that loading from a save is different from just starting the game.  Very few objects are like that.
		
		For that reason, alone, we have an actual `on_load` call.
	*/
	hittable_obj_constructor: "[
		add_object(_particles)
		;
		deactivate
		;


	/*
		We have a weird 'guard value' `_player_has_left_bounds` which we use to keep the player from respawning at a save point, and instantly saving.  However, it also causes issues with save points which are near the beginnings of level starts, so we do a quick check on load to see if the condition we're trying to prevent is even an issue, and if it's not, then we just flip that flag.
	*/
		if(
			(not is_player_within_bounds),
			set(_player_has_left_bounds, true)
		)		
	]",
	
#-------------------------- vars --------------------------#
	_x_bound: { type: "int", editor_info: { type: "x", value: "mid_x-50" } },
	_x2_bound: { type: "int", editor_info: { type: "x", value: "mid_x+50" } },
	_y_bound: { type: "int", editor_info: { type: "y", value: "mid_y-200" } },
	_y2_bound: { type: "int", editor_info: { type: "y", value: "mid_y+100" } },

	_last_triggered: { type: "int", default: -400, persistent: false },
	_player_has_left_bounds: { type: "bool", default: false, persistent: false },  //be false so when we respawn, we don't immediately save.
},

on_load: "	[
				_constructor_guarded
				
				;
				
				/*
					When the player spawns, find the nearest save statue, then visually activate it.  If it's nearby, we can assume we respawned from it after loading-from-a-save or dying
				*/
				if(nearest_save_statue != null,
					if(player_is_near_statue(nearest_save_statue, 100),
						nearest_save_statue.visually_activate
					)
				)
				where nearest_save_statue =
					head(
						sort(
							filter(level.chars,
								value is obj save_statue),
								lib.math.length(a,level.player) < lib.math.length(b,level.player)
							)
						)
			]",


on_process: "[
				if(
					is_player_within_bounds and
					has_not_triggered_recently and
					_player_has_left_bounds,
					
					activate
				),
				if(
					(not player_is_near_statue(me,200)) and
					(not is_player_within_bounds) and
					(not _player_has_left_bounds),
					
					set(_player_has_left_bounds, true)
				)
			]",

on_interact: "if((me.cycle - _last_triggered > 60), activate)", /* give enough time for the "The game has been saved" to disappear */
		
animation: [
	{
		"@base": true,
		image: "props/save_statue.png",
		pad: 3,
		palettes: "@include data/palettes.cfg:seaside_palettes + forest_palettes + cave_palettes",
	},
	{
		id: "normal",
		rect: [1,1,30,30],
    	interact_area: [1,1,30,30],
		frames: 1,
		duration: -1,
	},
],


}
