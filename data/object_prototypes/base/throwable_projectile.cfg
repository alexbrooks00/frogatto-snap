/*
 a general prototype for ammunition that lies around on the ground/in-trees/etc, and can be swallowed and spat by the player.  NOT meant for general enemies, just meant for otherwise inert projectiles that can be spat.  Expected to have a limited amount of custom behavior overrides, especially for stuff like how the thunder-melons explode on contact.

 to make projectiles hangable in a tree, the only necessary change is to make their normal animation have an accel_y of zero.
*/

{
id: "throwable_projectile",
prototype: ["throwable"],
mass: 5,
friction: 1000,
traction: 1000,
solid_area: [1,0,14,15],
zorder: "@include data/zorder.cfg:player",
zsub_order: -2,
always_active: true,
affected_by_currents: true,

object_level_collisions: true,
solid_dimensions: ["thrown"],

properties: {
#-------------------------- constructor/destructor logic --------------------------#
	throwable_object_contructor: "commands :: throwable_projectile_contructor",

	throwable_projectile_contructor: "commands :: null",	//for any specific types of throwable objects, like cannonballs


#-------------------------- hittable overrides --------------------------#
	has_mini_hp_bar: "bool :: false",
	taxonomy: "TaxonomyType :: enum neutral",
	swallowable: "bool :: true",

#-------------------------- core functionality --------------------------#
	team: "string :: if(is_player_ammo,'player',if(velocity_x != 0 or velocity_y != 0, if(time_spat, 'player','evil'), 'evil_harmless'))",

	attack_damage: "int :: standard_thrown_damage",
	handle_knockback: "def(obj hittable collide_with) -> commands execute(me,[add(velocity_x, collide_with.facing * collide_with.attack_knockback),add(velocity_y, collide_with.facing * collide_with.attack_knockback), if('on_back' in me.available_animations,[animation('on_back'),fire_event('spat')])])",

	on_back_duration: "int :: 200",
	springiness: "int :: 0",
	spring_amount: "int :: 0",
	bounce_roundness: "int :: 0",
	

								
#-------------------------- terrain collisions --------------------------#
	
	enter_water: "force_death()",
},



#-------------------------- gets set by frogatto immediately after the creature is launched --------------------------#
on_spat: "[proto_event('throwable','spat'),set(_on_back_count, 0)]",

#-------------------------- handle ending the on_back timeout --------------------------#
on_return_to_normal: "force_death()",
on_end_anim: "if(_on_back_count > on_back_duration, fire_event('return_to_normal'), if(animation != 'normal' and is_standing and 'on_back' in available_animations, animation('on_back'), animation(animation)))",

#-------------------------- handle on_back twitching --------------------------#
on_process_on_back: "[add(_on_back_count,1),if(_on_back_count > (on_back_duration*3)/4, set(brightness, if(cycle%6 > 2, 256, 512)))]",


#-------------------------- disable body collisions --------------------------#
on_collide_object_body: "",


on_collide_feet: "animation('thrown')",


}
