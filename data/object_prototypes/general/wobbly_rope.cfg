{
	id: "wobbly_rope",
	prototype: ["standard_values"],
	
	properties: {
#-------------------------- boundary conditions --------------------------#
		bounds: {
			type: "{x: decimal, x2: decimal, y: decimal, y2: decimal}",
			init: "{x: mid_x, x2: mid_x+1, y: mid_y, y2: mid_y+1}"
		},


		length: "decimal :: lib.math.length(bounds.x, bounds.y, bounds.x2, bounds.y2)",
		
		progression_fraction: {type: "decimal", default: 0},

#-------------------------- distortion --------------------------#
		recombine_pairwise: "def([decimal|[decimal,decimal]] list) -> [[decimal, [decimal,decimal]]]
											([[decimal, [decimal,decimal]]] <- zip( ([decimal] <- list[0 : size(list)/2]), ([[decimal,decimal]] <- list[size(list)/2: size(list)]), [a,b]))",
		recombine_serially: "def([[decimal, [decimal,decimal]]] list) -> [decimal|[decimal,decimal]]
											map(list,value[0]) + map(list,value[1])",
		convert_to_unit_square_coords: "def([[decimal, [decimal,decimal]]] list) -> [[[decimal, decimal], [decimal,decimal]]]
															map(filter(list, value[0] >= 0.0 and value[0] < 1.0), [[((decimal <- value[0]) - 0.5)*2, -1.0] , ([decimal,decimal] <- value[1]) ]) +
															map(filter(list, value[0] >= 1.0 and value[0] < 2.0), [[1.0,  ((decimal <- value[0]) - 1.5)*2] , ([decimal,decimal] <- value[1]) ]) +
															map(filter(list, value[0] >= 2.0 and value[0] < 3.0), [[-((decimal <- value[0]) - 2.5)*2, 1.0 ] , ([decimal,decimal] <- value[1]) ]) +
															map(filter(list, value[0] >= 3.0 and value[0]<= 4.0), [[-1.0, -((decimal <- value[0]) - 3.5)*2] , ([decimal,decimal] <- value[1]) ])",
		flip_if_facing_left_or_upside_down: "def([[[decimal, decimal], [decimal,decimal]]] list) -> [[[decimal, decimal], [decimal,decimal]]]
													map(list, [[value[0][0] * facing,value[0][1] * v_flip] ,value[1]]) where v_flip = -upside_down",
		convert_back_to_serial_coords: "def([[[decimal,decimal], [decimal,decimal]]] list) -> [[decimal, [decimal,decimal]]]
													map(filter(list, value[0][1] = -1.0 and value [0][0] <  1.0), [( value[0][0]/2 + 0.5),value[1]]) + 
													map(filter(list, value[0][0] =  1.0 and value [0][1] <  1.0), [( value[0][1]/2 + 1.5),value[1]]) +
													map(filter(list, value[0][1] =  1.0 and value [0][0] > -1.0), [(-value[0][0]/2 + 2.5),value[1]]) +
													map(filter(list, value[0][0] = -1.0 and value [0][1] > -1.0), [(-value[0][1]/2 + 3.5),value[1]])",
		sort_back_to_serial_order: "def([[decimal, [decimal,decimal]]] list) -> [[decimal, [decimal,decimal]]]
											sort(list, a[0] < b[0])",
		
		converted_custom_draw_params: "[decimal|[decimal,decimal]] ::
							recombine_serially( sort_back_to_serial_order( convert_back_to_serial_coords( flip_if_facing_left_or_upside_down( convert_to_unit_square_coords( recombine_pairwise( custom_draw_params))))))",

	custom_draw_params: "[decimal|[decimal,decimal]] :: (
		offsets +
		map(offsets, value + 2.0) +
		map(offsets, wt(value)) +
		map(offsets, wb(value))
	)
		where offsets = (create_offsets(node_count))
		where wt = def(decimal offset) generate_wobble(offset, true)
		where wb = def(decimal offset) generate_wobble(offset, false)",
	

		node_count: "int :: 10",
		generate_wobble: "def(decimal offset, bool is_top) -> [decimal,decimal] [
			0 * facing,
			(
				1 *
				20.0 *				//just a coefficient to give the wobble width
				sin(
					inner_offset *			// the part that tells it where we are, horizontally
					360 +											// this multiples the 'where we're at horizontally' to make it so we go most of the way through a 'wave' by the time we get through the length. 
					level.cycle*10.0										// this gets 'time' involved; this is how fast the wobble propagates
				) *
				sin(	//This is attenuation code that basically pins the start and end, so the wobble is only in the middle.  180 would pin both ends; 200 gives no wobble at the start, and a little bit at the end.
					(inner_offset) * 200
				)
				*
				lib.math.ease_out_sine( 1.0 - progression_fraction )
			) 
		] where inner_offset = if(is_top, offset, (1.0 - offset))",
				
		create_offsets: "def(int item_count) -> [decimal] map(range(item_count), (value)/decimal(item_count - 1) )",

		process_wobble: "[
			set(mid_y, int( (bounds.y2 + bounds.y) / 2) ),
			set(x, int((bounds.x2 + bounds.x) / 2 - (length/2))),
			set(draw_area, [0, 0, length/2, img_h/2]),
			set(rotate, ( angle(bounds.x, bounds.y, bounds.x2, bounds.y2) ) ),

			set(custom_draw, converted_custom_draw_params),
		]",
	},
	

		
	animation: {
		id: "normal",
		image: "characters/frogatto-tongueC.png",
		x: 0,
		y: 0,
		w: 7,
		h: 7,
# 		frames: 1,
# 		no_remove_alpha_borders: true,
	},
}