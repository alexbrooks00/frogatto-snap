{
id: "pullable_coordinator", //ie, levers.
prototype: ["pullable"],
hidden_in_game: true,


properties: {
#-------------------------- constructor/destructor logic --------------------------#
	pullable_coordinator_constructor: "commands :: [
											pullable_coordinator_constructor_custom
										]",

	pullable_coordinator_constructor_custom: "commands :: null",


#-------------------------- pullable overrides --------------------------#
	/*
		In these visual bits here, we're omitting the `animation` calls to pushed, because this is generally an invisible coordinator object.
	*/
	visually_turn_on: "commands :: [play_switch_sound_guarded]",
	visually_turn_off: "commands :: [play_switch_sound_guarded]", 

	should_this_be_active: "bool :: if((event_is_irreversible and (_event != default_event_state)),
										bool(_event),
										size(activated) = size(monitoring)
									)",


#-------------------------- coordination logic --------------------------#
	add: "def(obj pullable_untracked lock) -> commands if(not lock in me.monitoring, [
		add(me.monitoring, [lock]),
		set(lock._lock_coordinator, me),
		
		fire_event(me,'do_coordination_setup')
	])",
	remove: "def(obj pullable_untracked lock) -> commands [
		set(me.monitoring, newMonitoring),
		set(lock._lock_coordinator, null),
	] where newMonitoring = filter(me.monitoring, value!=lock)",

	
	monitoring: { type: "[obj pullable_untracked]", default: [] },
	activated: { type: "[obj pullable_untracked]", default: [] },




	/*
		This essentially handles the "differential" of whether we're changing state.  The sets of `monitoring` and `activated` will always update before we flip the `event`.  If they're not in agreement, we need to toggle.  If they are in agreement, we should do nothing.
		
		`is_this_active` always tracks events (because they're all that exist for lower-prototyped objects).  `should_this_be_active` tracks the pool we're monitoring.
	*/
	test_set: "	bind_command( def() [
					if(should_this_be_active,
						if(not is_this_active,
							toggle_on
						),
						if(is_this_active,
							toggle_off
						)
					),
					custom_update_logic
				])",
	
	custom_update_logic: "commands :: null", //a hook for particular object types
	
	
#-------------------------- sample activation logic --------------------------#
	/*
		This is really the stuff that would change if you were going to build additional puzzles off of an object like this.
		
		Right now, this is simply set up so that if all of the coordinated objects are active, this is active.
		I.e. if you light all 4 braziers, then the 'unlock' happens.
	*/


	setup_list_of_locks: "commands :: [
		//I'm really not sure why this check is here, but maybe it's a workaround for a bug, or an affordance to let this not assert the editor before you've placed all the objects.
		if( size(monitoring) = size(filter(level.chars, value is obj pullable_untracked and value.event = me.event)),
			[
				if(_event != default_event_state, map( monitoring, add(activated, [value])))
			]
		),
	]",

	is_lock_active: "def(obj pullable_untracked lock) -> bool  (lock in activated)",

	activate: "def(obj pullable_untracked lock) -> commands [
		set(activated, unique(activated + [lock])),
		schedule(1, test_set),
	]",
	
	deactivate: "def(obj pullable_untracked lock) -> commands [
		set(activated, filter(activated, not value = lock)),
		schedule(1, test_set),
	]",

#-------------------------- event observance --------------------------#
	
},


on_do_coordination_setup: "setup_list_of_locks",

}