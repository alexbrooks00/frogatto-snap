{
	id: "status_effect_attache",
	prototype: ["effects_attache"],



	properties: {
		kind: { type: "StatusEffectKind", dynamic_initialization: true },
		cycle_started_at: { type: "int", dynamic_initialization: true },
		position_created_at: { type: "{x: int, y: int}",  dynamic_initialization: true },		
	
#-------------------------- custom_behavior --------------------------#
		hittable_parent: "obj hittable :: me._parent_obj asserting me._parent_obj is obj hittable",

		info_for_kind: "StatusEffectKindInfo :: find_or_die(
													me.hittable_parent.status_effect_presets,
													'cannot find: ' + str(me.kind),
													value.kind = me.kind
												)",

		affect_parent_status: "commands :: if(is_alive, info_for_kind.process_effect(me))",

		consider_suicide: "commands :: 	if(info_for_kind.duration != null and me.is_alive,
											if((level.cycle > cycle_started_at + info_for_kind.duration),
												schedule_death_cleanup
											)
										)",
												//debug('removing status_effect ${me.kind} from ${me.hittable_parent.type} at ${level.cycle}'), 
		
		
		visual_fx: "obj effects_attache_batch ::
			object('effects_attache_batch', mid_x, mid_y, {
				parent: me,
				effects_preset: info_for_kind.visual_fx_type,
				timeout: 1000000,
				time_to_die: 50,
			})",
		
#-------------------------- prototype overrides --------------------------#
		do_setup: "commands ::	[
									initialize_position,
									set(cycle_started_at, level.cycle),
									add_object(visual_fx)
									;
									set(position_created_at, {x: hittable_parent.x, y: hittable_parent.y}),
								]",
	},

	
	on_process: "	[
						affect_parent_status,
						consider_suicide
					]",

}
