{
	id: "effects_attache_recolor",
	prototype: ["effects_attache"],

	types: {
		HSLColor: "{ h: decimal, s: decimal, l: decimal }",
		HSLGradientElement: "{ hsl: HSLColor, offset: decimal }",
	},

	properties: {

		do_setup: "commands :: [
			initialize_position
			;
			set_colors	
		]",
	
		turn_off: "commands :: [
			unset_colors
		]",
		
	#-------------------------- configuration --------------------------#
		default_color_adjustment_hsl:  "HSLColor :: { h: 0.0, s: 1.0, l: 1.0 }",

		colors_hsl:  { type: "[HSLGradientElement]", default: [{ hsl: { h: 0.0, s: 0.0, l: 1.0 }, offset: 0.0}] },

		color_adjustment_hsl:  "HSLColor :: if(size(colors_hsl) > 0,
												current_color,								
												default_color_adjustment_hsl
											)",

		effects_preset: { type: "VisualEffectAttacheBatchType", dynamic_initialization: true },


	#-------------------------- attachment to parent --------------------------#
		set_colors:  "if(not already_in_parent, [
			set(root_parent_object.use_forced_hue, true),
			add(root_parent_object.recolor_attaches, [(obj effects_attache_recolor <- me)]),
		])
			where already_in_parent = (obj effects_attache_recolor <- me).effects_preset in map( root_parent_object.recolor_attaches, (obj effects_attache_recolor <- value).effects_preset)
		
		",

		unset_colors:  "[
			set(root_parent_object.use_forced_hue, false),
			remove_from_root_parent,
		]",


		remove_from_root_parent: "commands ::	if(me in root_parent_object.recolor_attaches,
													; set(root_parent_object.recolor_attaches,
														filter(root_parent_object.recolor_attaches, value != me)
													)
												)",


	#-------------------------- gradient logic --------------------------#

		/*
			This is where we do the complex-ish math to turn this from a simple "set just one color and leave it" to being able to have a gradient that we cycle through periodically.
		*/

		current_offset: { type: "decimal", default: 0.0 },


		higher_offset_el: "HSLGradientElement|null :: find(sort(colors_hsl, a.offset < b.offset), value.offset >= current_offset)",
		lower_offset_el: "HSLGradientElement|null :: find(sort(colors_hsl, a.offset < b.offset), value.offset <= current_offset)",


		right_side_color: "HSLGradientElement :: if( higher_offset_el,
			higher_offset_el,
			back_or_die(colors_hsl)
		)",

		left_side_color: "HSLGradientElement :: if( lower_offset_el,
			lower_offset_el,
			head_or_die(colors_hsl)
		)",

		gap_scaling_coefficient: "decimal :: 1.0/(right_side_color.offset - left_side_color.offset)",

		gap_scaling_for_current_offset: "current_offset * gap_scaling_coefficient",

		current_color: "HSLColor :: {
							h: mix( right_side_color.hsl.h, left_side_color.hsl.h, amt),
							s: mix( right_side_color.hsl.s, left_side_color.hsl.s, amt),
							l: mix( right_side_color.hsl.l, left_side_color.hsl.l, amt)

						} where amt = gap_scaling_for_current_offset",
	},

	on_process: "[
					set(current_offset, lib.math.decimal_mod(current_offset + 0.01, 1.0)),
				]",
}
