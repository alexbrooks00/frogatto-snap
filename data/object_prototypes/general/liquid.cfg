{
id: "liquid",
prototype: ["transient_object"],
zorder: "@include data/zorder.cfg:liquid_particle_effects",
is_strict: true,
ignore_collide: true,
hidden_in_game: true,

/*
	READ ME FIRST:
	
	When adding new waters, which derive from this prototype, some shader work is required. This is because we can't have everything needed for the liquid shader be pulled out of the object .cfg file - some waters legitimately have different shading which necessitates *all* waters touch the system.  Previously, this was handled by having different shaders for each water, and we still can by overriding the setup_shader property. However, the number of shaders was getting large, and as we needed to do some fairly heavy refactoring to them, we decided to unify all the water shaders.

	There are two concepts around water that you should know about. First, a "water object" is a controller, such as water_controller or acid_controller. All water objects inherit from this prototype, liquid. The other concept is a "water type", which is how the water is shaded. For example, water_controller and water_controller_ocean are both are shaded like water, but acid_controller is shaded like acid. Because of the way shaders work, we give each water type a number. Water, being the oldest liquid, happens to be water type 0. Acid is water type 1. This mapping is defined in a switch statement in shaders.cfg.

	There are two stages of adding a water (aka a liquid):
		1. Adding a new "water object" which is shaded the same as an existing water object. Seach for all "[ADDING_WATER]" in shaders.cfg. You are *not* adding a new water type at this moment, so you only care about the "create" and "draw" events. Register your new water controller object as described there, using an existing water type.  Make sure everything works. If you do not need to shade your new water differently, you are done!
		
		2. Adding a new type of shading for your water object. This new "water type" will necessitate a bit of shader work - you will have to add a new texture, some new math, and a bit of metadata to tell how it should move. Again, search for all "[ADDING_WATER]" in shaders.cfg to see what you need to change to do this.
*/

properties: {
#-------------------------- liquid-specific settings --------------------------#
	get_texture: "texture_object :: query_cache(global_cache(4), null, get_texture(liquid_texture))",
	texture_dim: "decimal :: 256.0",
	texture_speed: "decimal :: 0.002",
	liquid_texture: "string :: 'liquids/water.png'",

	water_color: "[int] :: [70, 0, 70, 50]", //Water no longer takes a color, since it uses a shader now. This has no effect.
	add_water_effect: "commands :: add_water(_x_bound, _y_bound, _x2_bound, _y2_bound, water_color)",
	add_particle_effect: "commands :: []",
	surface_type: "string :: 'surface_still'",
	liquid_surface: {
			/*
				The surface wobbles around relative to the water because the surface is on the pixel grid, but the water renders in screen space which is *not* on the pixel grid.
			*/
		type: "custom_obj", //liquid.surface does not exist yet?
		init: "object('${me.type}.${me.surface_type}', x,y, {
			parent: me,
			zorder: lib.zorder.get('water_surface'), //Place surface line over water effect, as it may be opaque.
		})",
		persistent: false,
	},

	liquid_damage: "int :: 0",
	damage_type: "DamageType :: enum neutral",
	remove_water_effect: "commands :: remove_water(_x_bound, _y_bound, _x2_bound, _y2_bound)",


	
	water_width: "_x2_bound - _x_bound",
	water_height: "_y2_bound - _y_bound",


#-------------------------- constructors --------------------------#
	transient_obj_constructor: "commands :: [
		liquid_prototype_constructor ;
		liquid_obj_constructor
	]",



	liquid_prototype_constructor: "commands :: [
		set(me.mid_x, _x_bound + water_width/2),
		set(me.mid_y, _y_bound + water_height/2),
		;

		add_particle_effect,
		add_object(liquid_surface),
		fire_event(liquid_surface, 'create'),
		
		set(activation_area, [
			_x_bound - 50,
			_y_bound - 100,
			_x2_bound - _x_bound + 100,
			_y2_bound - _y_bound + 100
		]),
	]",

	liquid_obj_constructor: "commands :: null",
	
	setup_shader: "commands :: [
		add(level.frame_buffer_shaders, [{
			begin_zorder: -100,
			end_zorder:   -90, //Switch from -90 to -91 to reproduce.
			shader_info: 'liquid',
			label: me.type,
		}])
	]",


#-------------------------- vars --------------------------#
	_x_bound: { type: "int", editor_info: { type: "x", value: "x-100" } },
	_x2_bound: { type: "int", editor_info: { type: "x", value: "x+150" } },
	_y_bound: { type: "int", editor_info: { type: "y", value: "y-100" } },
	_y2_bound: { type: "int", editor_info: { type: "y", value: "y+150" } },
},

editor_info: {
	category: "controllers, liquid",
},

on_editor_changing_variable:"remove_water_effect",
on_editor_removed: "remove_water_effect",
on_editor_changed_variable: "[
	add_water_effect,
	setup_particles, //Update particle bounds when editing.
	set(liquid_surface.xy, xy), //Fix liquid surface becoming detached.
	fire_event(liquid_surface, 'create'),
]",
on_editor_added: "add_water_effect",



on_end_anim: "animation('normal')",

object_type: [{ //This object must remain first in the object_type list because whitewater controller derives from it that way. I can't figure out how to propery do it via a prototype, which complains it can't find liquid.surface if I try that, but also complains I can't have two of the same-named object if I don't.
	id: "surface_still",
	is_strict: true,
	serializable: false,
	zorder: "@include data/zorder.cfg:water",
	
	properties: {
		list_probe_output: false, //debug() solidity probe results
		show_probes_in_editor: false, //slow
		
		//test on ./anura --level=rocky-roots.cfg
		//  …######_____#####_____#_#####_#####___#…
		//0     0001   1  0  1   101  0  1 ?? 1  1  00
		//       ..               .
		//       36               6
		calculate_water_surface_intensity: "
			def(int index, [bool] point_solidity_list) -> decimal //0..1
				max(
					int(not point_solidity_list[index+0]) * (3.0/3), //Full opacity when no wall.
					int(not point_solidity_list[index-1]) * (1.0/3), //More transparency farther into the wall.
					int(not point_solidity_list[index+1]) * (1.0/3),
					int(not point_solidity_list[index-2]) * (0.3/3),
					int(not point_solidity_list[index+2]) * (0.3/3),
				)
		",
	},
	
	on_create: "(
		[
			set(relative_x, parent.facing * ((parent._x_bound + parent._x2_bound)/2 - parent.mid_x)),
			set(relative_y, parent._y_bound-parent.mid_y),
			
			if(list_probe_output, [
				debug('create', 'label', parent.label),
				map(range(filter_radius, size(solidity_probes) - filter_radius), 'step', [
					debug('probe', 'label', parent.label, 'solid', solidity_probes[step], 'opacity', calculate_water_surface_intensity(step+0, solidity_probes)),
				])
			]),
			
			if(show_probes_in_editor,
				map(
					solidity_probe_targets,
					spawn('target', parent_left_tile_aligned_bound + value*tile_size, parent._y_bound, {
						alpha: if(
							point_solid(level, me, 
								parent_left_tile_aligned_bound + value*tile_size, 
								parent._y_bound ),
							96, 256),
					})
				)
			),
			
			if(water_surface_width > 0,
				if(water_surface_width <= 8192, //Fix issues 418, 'Water has width limitations due to texture render limitations, which prevent some levels from loading.'
					set(animation, ( //Two-line water surface image; fades in on both sides.
						lib.gui.render_frame(c, 
							water_surface_width, 2, 
							map([ //Top and bottom 'surface lines'.
									{offset_y: 0, color: surface_color_1}, 
									{offset_y: 1, color: surface_color_2},
								], 'line', [
								c.set_linear_pattern(0, 0, (water_width/tile_size)*tile_size, 0, 
									map( //Generate a gradient based on where there is and isn't solid land.
										range(size(solidity_probes) - filter_radius*2 + 2), //Why +2? It is a mystery.
										'step',
										line.color + {
											offset: step/1.0/(size(solidity_probes) - filter_radius*2 + 1), //+1, also a mystery, but linked to the +2 above.
											alpha: calculate_water_surface_intensity(step+filter_radius-1, solidity_probes),
										},
									)
								),
								c.rectangle( //xywx
									min(parent._x_bound, parent._x2_bound) % tile_size, line.offset_y,
									water_width/tile_size*tile_size, 1,
								),
								c.fill(),
							])
						)
					)),
					debug('Warning: Not drawing surface for water ' + parent.label + ', too wide.'),
				),
				debug('Warning: Not drawing surface for water ' + parent.label + ', too narrow.'),
			),
		] where
			c = canvas(),
			surface_color_1 = {red:1.0, green:1.0, blue:1.0}, //top line
			surface_color_2 = {red:0.5, green:0.5, blue:0.5}, //bottom line
			water_surface_fade_distance = 64,
			water_surface_width = water_width/tile_size*tile_size
		where
			solidity_probes = 
				[true] * (filter_radius+force_border_fade_width)
				+ map(
					solidity_probe_targets, //A list of numbers from -4 to, like, 14 or something.
					point_solid(level, me, 
						parent_left_tile_aligned_bound + value*tile_size, 
						parent._y_bound ) )
				+ [true] * (filter_radius+force_border_fade_width) //Make the water surface fade out into the surrounding tile, like they fade into solid, even if not solid.
		where
			solidity_probe_targets = range(0-water_surface_overhang+force_border_fade_width, tile_edges + water_surface_overhang*2 - force_border_fade_width*2 + 1)
		where
			tile_edges = water_width/tile_size + 1,
			parent_left_tile_aligned_bound = lib.math.round_to_nearest(min(parent._x_bound, parent._x2_bound), tile_size) + (tile_size/2)
		where
			water_width = max(parent._x_bound, parent._x2_bound) - min(parent._x_bound, parent._x2_bound),
			tile_size = 32,
			water_surface_overhang = 0, //Have the water surface extend into the rocks a bit. (Does not work!)
			force_border_fade_width = 2, //The water surface needs a bit of padding to force a fade out. Better than just ending, I think?
			filter_radius = 3, //pattern needs a few elements on each side as buffer
	) asserting parent is obj liquid | 'No liquid set for surface.'",
	
	animation: [{
		id: "normal",
		image: "effects/particles.png",
		x: 117, y: 42, w: 28, h: 28,
		frames: 1,
		duration: 1000,
	}, {
		//We need a dummy frame here to give the object time to load in and set fbo to the water texture with cairo draw commands.
		id: "fbo",
		image: "effects/particles.png",
		x: 117, y: 42, w: 28, h: 28,
		frames: 1,
		duration: 1000,
	}],
}]
}
