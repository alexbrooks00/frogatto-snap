{
id: "kitty_sniper",
prototype: ["kitty"],
solid_area: [21,16,45,38],
is_strict: true,
has_feet: true,
activation_border: 1100,

editor_info: {
	"@derive": "@include data/object_prototypes/enemies_general_types/kitty.cfg:editor_info",
	help: "A sniper kitty who tries to shoot Frogatto.",
},

properties: {
#-------------------------- constructor/destructor logic --------------------------#
	specialized_creature_category_constructor: "[
													animation('snipe'), 
													set(time_in_animation_delta, 1),
													add_object(reticule),
													
													//add_object(sniper_ray), 
													set(sniper_ray.zorder, me.zorder-1),
													//show_points(),
												]",

	specialized_creature_category_destructor: "[
													//remove_object(sniper_ray),
													remove_object(reticule),
												]",


#-------------------------- hittable metadata --------------------------#
	title: "~Sniper Kitty~", //duplicated in kitty_sniper_background.cfg
	description: "~Boom, headshot.~",
	taste: "~Dry.~",

	//flinch_threshold: "int :: 10",

#-------------------------- gameplay functionality --------------------------#
	range: "{
		min: 50,
		max: 1000, //in level coordinates
	}",
	  
	gunsight_distance_from_source: 20,

	target: "level.player",
	
	granularity: 4,

#-------------------------- cosmetic stuff for the kitty itself --------------------------#
		/*
			Point the kitty, visually, in the right direction.
			
			This uses a "cheap trick" where we just have one animation for the full 360° rotation of the kitty, and we use "manual adjustment of frame timing" to actually point it at the player.
		*/
	aim_at: "def(PointLike target)->commands [
		if(0 < frame and frame < frames/2, set(facing, -1)), //Don't flip for straight up/down, to add in a little continuity/personality/lazyness.
		if(frames/2 < frame and frame < frames, set(facing, 1)),
		set(time_in_animation, int(lib.math.interpolate([0,8,0], frame/1.0/frames))), //We've got separate animations for straight up and down, so we animate up to and back down from the apex.
	] where frame = m.loop(m.round(m.angle(me, target)/(360/16.0)-frames/4), frames)
	  where m = lib.math
	  where frames = 16",
	  

#-------------------------- line of sight calculations for the shot being fired --------------------------#
		/*
			This gets used for one end of a line segment - this represents the "breech" (the deep-inside-the-gun end of the barrel) where the shots starts;  this is just a visual offset so the shot comes out of the middle of the kitty and not out of some other visually weird spot.
		*/
	gunsight_source: "Point <- zip(me.midpoint_xy, [0,14])", //TODO: Factor in distance to rifle barrel here?

		/*
			And this is the other end of the line segment - what's being shot at.
		*/
	target_position: "Point <- lib.standardize.toPoint(target)",
	
	

		

	trace_sight_line: "def(Point source, Point target) -> null|Point
		find_first_solid_point_on_line(level, me, rnd(source.x), rnd(source.y), rnd(target.x), rnd(target.y), 4.0) where rnd = lib.math.round
	",

	process_aiming: "commands :: if(lib.math.length(me, target) < range.max, [
				/*
					purely cosmetic stuff
				*/
			me.aim_at(target),
			set(reticule.mid_xy, target.mid_xy),

			set(reticule.alpha,
				if(can_see_target,
					if(timing_fraction > 0.75,
						255,
						48 + lib.math.round(adjusted_timing_fraction*127) 
					),
					127
				)
			),

			set(reticule.scale,
				if(can_see_target,
					if(timing_fraction > 0.75,
						1.0,
						2.0 - timing_fraction 
					),
					1.0
				)
			),

			
				/*
					Actual gameplay mechanics
				*/
			if(not can_see_target, [
				set(target_sighted_duration, 0),
			],[
				add(target_sighted_duration, 1),

				if(timing_fraction < 0.75,
					add(reticule.rotate, lib.math.round(10.0 * (1.0 - (adjusted_timing_fraction)))),
					set(reticule.rotate, 45.0)
				),
				if(timing_fraction > 0.95,
					set(reticule.brightness, 10000),
					set(reticule.brightness, 255)
				),
				
				if(target_sighted_duration = target_sighted_duration_needed, [
					fire_shot,
					set(target_sighted_duration, 0),
				]),
			]),
		]
			where adjusted_timing_fraction = min(1.0, 0.25 + timing_fraction)
			where timing_fraction = decimal(target_sighted_duration)/decimal(target_sighted_duration_needed)
			where can_see_target = _can_see_target( trace_sight_line(me.mid_xy, target.mid_xy) )
		,

		[
			set(reticule.alpha, 0),
			set(sniper_ray.alpha, 0),
			set(target_sighted_duration, 0),
		])",
		
		
		_can_see_target: "def(Point|null vision_extent) -> bool
			if(vision_extent != null,
				target.solid_rect.x < vision_extent.x and vision_extent.x < target.solid_rect.x2 and
				target.solid_rect.y < vision_extent.y and vision_extent.y < target.solid_rect.y2,
				false
			)
		",

#-------------------------- shot firing logic --------------------------#
		angle_components_to_player: "{x: decimal, y: decimal} :: unit_triangle_xy_components_for_angle( angle_to_player )",

		angle_to_player: "decimal :: lib.math.angle(me, [predicted_player_mid.x, predicted_player_mid.y])",
		predicted_player_mid: "{x: decimal, y: decimal} :: (obj frogatto_playable <- level.player).position_predictor.prediction(player_lead_time)",
		player_lead_time: "int :: 15",

		fire_shot: "commands :: [
							spawn('kitty_sniper.muzzle_flash',
								mid_x + muzzle_flash_offset * ang.x,
								mid_y + 14 + muzzle_flash_offset * ang.y,
							{
								rotate: angle_to_player + 90,
							}),
		
		
							spawn('kitty_sniper.shot',
								mid_x + shot_offset * ang.x,
								mid_y + 4 + shot_offset * ang.y,
							{
								rotate: angle_to_player + 90,
								velocity_x: shot_speed * ang.x,
								velocity_y: shot_speed * ang.y,
							})
						] where ang = angle_components_to_player
						  where shot_speed = 1000
						  where muzzle_flash_offset = 62
						  where shot_offset = 22",


#-------------------------- master control logic --------------------------#
		/*
			There's a whole mess of logic for controlling the behavior of this object when it's ready to shoot.   However, being ready to shoot is only a condition that's active a small percentage of the time - the rest of the time, these guys pace back and forth, like other kitties.
		
		*/
	player_noticeable: "bool :: (player_in_decent_y_pos and abs(level.player.midpoint_x - self.midpoint_x) < if(self.facing = desired_facing, front_detection_area, rear_detection_area))",

	rear_detection_area: "int :: range.max/2",
	front_detection_area: "int :: range.max",


	choose_action: "commands :: if((player_noticeable), if(not animation = 'snipe' and not animation in ['hurt','turn','bounce'], animation('snipe')), animation('walk'))",

	player_in_decent_y_pos: "true",




#-------------------------- some object references --------------------------#
		
	sniper_ray: {
		type: "obj rope_angled_controller", 
		init: "object('rope_angled_controller', me.x, me.y, {animation: 'tongue'})",
	},
	
	reticule: {
		type: "obj kitty_sniper.reticule", 
		init: "object('kitty_sniper.reticule', me.x, me.y, 1)",
	},
	
	target_sighted_duration: {type: "int", default: 0},
	target_sighted_duration_needed: "240",
	

},

on_process_snipe: "[process_aiming, choose_action]",
//on_process: "process_aiming",

animation: [
	{
		"@base": true,
		image: "enemies/kitty-sniper.png",
		accel_x: 0,
		accel_y: 80,
		pad: 3,
		rotate_on_slope: true,
		body_area: "all",
		no_remove_alpha_borders: true,
	},

	{
		id: "stand",
		rect: [1,83,68,151],
		frames: 1,
		duration: 8,
	},
	{
		id: "turn",
		rect: [58,198,111,233],
		frames: 1,
		duration: 8,
	},
	{
		id: "spring",
		rect: [1,159,58,194],
		frames: 1,
		duration: 8,
	},
	{
		id: "hurt",
		rect: [1,198,54,233],
		frames: 1,
		duration: 8,
	},
	{
		accel_x: 300,

		id: "walk",
		rect: [1,83,68,151],
		frames: 4,
		duration: 6,
		events: "0:12:footfall",
	},


	{
		id: "snipe", //One frame for each of the drawn 180° rotations.
		no_remove_alpha_borders: true,
		rect: [1,1,68,71],
		frames: 9,
		duration: 1,
	},
],

object_type: [{
	id: "smoke_trail",
	is_strict: true,
	zorder: "@include data/zorder.cfg:in_front_of_everything",
	
	animation: {
		id: "disperse",
		image: "enemies/kitty-sniper-bullet.png",
		rect: [1,0,10,9],
		frames: 4,
		pad: 3,
		duration: 4,
	},
},{
	id: "muzzle_flash",
	zorder: "@include data/zorder.cfg:in_front_of_everything",
	
	on_end_anim: "die()",
	
	animation: {
		id: "normal",
		image: "enemies/kitty-sniper-shot-muzzle-flash.png",
		x: 0,
		y: 0,
		w: 41,
		h: 41,
		frames: 8,
		pad: 0,
		duration: 2,
		no_remove_alpha_borders: true,
	},
},{
	id: "shot",
	prototype: ["shot"],
	zorder: "@include data/zorder.cfg:in_front_of_everything",
	properties: {
		attack_damage: "if(higher_difficulty, 3, 2)",

			//custom logic for *forcing* these to hit the player, no matter how the player dodges.
		attract_duration: "decimal :: 55.0",
		attraction_elapsed: "int :: cycle",
		fraction_into_attraction: "decimal :: attraction_elapsed/attract_duration",
		ang_offset: "attraction_elapsed * 0.0",
		_angle_to_player: "decimal :: lib.math.angle(me, level.player)",

	
		process_attract: "commands :: 
				[	
					set(mid_x, level.player.mid_x - x_diff) where x_diff = ((1.0 - fraction_into_attraction) * cos(_angle_to_player + ang_offset) * lib.math.length(me,level.player)),
					set(mid_y, level.player.mid_y - y_diff) where y_diff = ((1.0 - fraction_into_attraction) * sin(_angle_to_player + ang_offset) * lib.math.length(me,level.player)),
					set(rotate, _angle_to_player + 90),
				
					if(attraction_elapsed > attract_duration*2, force_death()),
				]",
	},

	on_process: "process_attract",
	
	on_end_anim: "set(animation, animation)",
	
	animation: {
		id: "normal",
		image: "enemies/kitty-sniper-shot.png",
		x: 0,
		y: 0,
		w: 23,
		h: 23,
		frames: 6,
		pad: 0,
		duration: 2,
		attack_area: "all",
		no_remove_alpha_borders: true,
	},
},{
	id: "reticule",
	is_strict: true,
	serializable: false,
	zorder: "@include data/zorder.cfg:in_front_of_everything",
	
	
	animation: {
		id: "normal",
		image: "enemies/kitty-sniper-reticule.png",
		x: 25,
		y: 0,
		w: 25,
		h: 25,
	},
},{
	id: "target",
	is_strict: true,
	serializable: false,
	zorder: "@include data/zorder.cfg:in_front_of_everything",
	
	
	animation: {
		id: "normal",
		image: "effects/particles.png",
		x: 23,
		y: 197,
		w: 28,
		h: 28,
	},
}],
	
}
