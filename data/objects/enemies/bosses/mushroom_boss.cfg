{
id: "mushroom_boss",
prototype: ["hittable"],
always_active: true,
/*editor_info: {
	category: "boss",
},*/

properties: {
	#-------------------------- constructor/destructor logic --------------------------#
		epihittable_obj_constructor: "commands :: [
			if(level.in_editor,
				[
					set_draw_size(1.0),
					set(alpha,255),
				],
				[
					set_draw_size(0.0),
					set(alpha,0),
				],
			),
			animation('sprout'),
		]",


	#--------------------------  hittable overrrides/settings --------------------------#
	
		taxonomy: "TaxonomyType :: enum mushroom",
		custom_damage_table: "{
			enum neutral: 1.0,
			enum fire: 1.0,
			enum energy: 0.5,
			enum arcane: 0.25,
			enum acid: 0.0,
			enum impact: 1.0,
			enum impale: 1.0,
			enum lacerate: 1.0
		}",
	
	
		death_fx_type: "'mushroom-boss'",
	
		corpse_object_type: "'${me.type}.corpse'",


		attack_damage:  "if(_sprouted, kill_anything, 0)",
		team:  			"if(_sprouted, 'evil', 'evil_harmless')",
	
		title: "~Mushroom Boss~",
		description: "~The heart of the corruption in the forest. Like many mushrooms, these are actually all one organism, joined together by underground tendrils. They must spread a chillingly long way...~",
		taste: "~Of dust and death and mycological chemicals!~",


	#--------------------------  special logic that lets the controller handle getting hit --------------------------#
		
		get_hit_by: "def(obj hittable collide_with) -> commands [
			if(not me.is_invincible and final_damage_amount(collide_with, collide_with.attack_damage) > 0, 
				[controller_obj.get_hit_by(collide_with), display_hurt_visuals(collide_with, collide_with.attack_damage)],
				[display_hurt_visuals(collide_with, 0)]
			),
		]",

		controller_obj: "(obj mushroom_boss.controller <- filter(level.chars, value.type = 'mushroom_boss.controller')[0])",
									
		is_invincible: "bool :: ((not me.animation = 'chargeup') or proto_conds) where proto_conds = (bool(invincible) or level.in_dialog or is_invincible_posthit)",

		play_object_specific_pain_vocalization: "def(DamageType damage_type, damage_amount) -> commands if(damage_amount > 0, sound('mushroom-boss-hurt.wav'), sound('mushroom-boss-resist.wav'))",
									
		set_draw_size: "def(decimal _scale) -> commands set(custom_draw, [0.0,1.0,2.0,3.0, [160-160*_scale,320-320*_scale],[-160+160*_scale,320-320*_scale],[-160+160*_scale,0],[160-160*_scale,0]])",


	#--------------------------  custom combat logic --------------------------#

		max_shots: "if(higher_difficulty, 3, 1)",
		should_shoot_homing_shot: "(size(filter(level.chars, value.type = 'mushroom_boss.big_shot')) <= max_shots)",

		max_babies: "if(higher_difficulty, 8, 4)",
		should_spawn_baby_mushroom: "(size(filter(level.chars, value.type = 'mushroom_jellyfish')) <= max_babies)",

		begin_chargeup: "execute(me, animation('chargeup') )",
		begin_idle: "execute(me, [animation('normal')])",
		begin_attack_homing: "execute(me, [if(should_shoot_homing_shot,animation('attack_homing'),begin_idle)])",
		begin_attack_spawn: "execute(me, [if(should_spawn_baby_mushroom,animation('attack_spawn'),begin_idle)])",
		begin_attack_stream: "execute(me, animation('attack_stream'))",
		begin_guard: "execute(me, [animation('enter_guard'),set(_guard_counter,3)])",



		set_behavior: "def(string choice) -> commands execute(me, [switch(choice,
						'chargeup', begin_chargeup,
						'attack_spawn', [begin_idle, schedule(1d100,begin_attack_spawn)],
						'attack_homing', [begin_idle, schedule(1d100,begin_attack_homing)],
						'attack_stream', [begin_idle, schedule(1d100,begin_attack_stream)],
						'guard', begin_guard,
			), set(me.behavior, choice)])",
		

		


	#--------------------------  vars --------------------------#
		behavior: { type: "string", default: "", persistent: false },
		_sprouted: { type: "bool", default: false, persistent: false },
		_guard_counter: { type: "int", default: 3, persistent: false },
	},
		
	on_end_normal_anim:  "[set(facing,facing),animation('normal')]",
	on_end_attack_homing_anim:  "begin_idle",
	on_end_attack_stream_anim:  "animation('attack_stream')",
	on_process_attack_stream: "if(level.cycle%10=0,spawn(type+'.stream_shot',mid_x,mid_y - 150,1,[set(child.velocity_y, -500 - 1d1000),set(child.velocity_x,1d500-250)]))",

	on_end_chargeup_anim:  "[animation('chargeup')]",
	on_end_guard_anim:		"if(_guard_counter <= 0, animation('exit_guard'), [animation('guard'),add(_guard_counter,-1)])",
	on_end_enter_guard_anim: "animation('guard')",
	on_end_exit_guard_anim: "animation('normal')",
	on_end_sprout_anim: "null",
	on_end_exit_sprout_anim: "animation('normal')",

	on_shoot: "[
		sound_falloff('mushroom-boss-shot'+1d2+'.wav',500),
		sound_falloff('mushroom-boss-spore-shot'+1d3+'.wav'),
		sound_falloff('squishy-shot'+1d5+'.wav'),
		spawn(type+'.big_shot', mid_x, y, 1, set(child.velocity_y, -500 - 1d400)),
	]",

	on_spawn_baby: "[
			sound('Jellyfish-Spawn'+1d2+'.wav'),
			add_object(obj),
			set(obj.velocity_y, 1500*up),

			] where obj = object('mushroom_jellyfish', mid_x, mid_y+(180*upside_down), 
			{
				_init_x: me.mid_x + 1d400-200, 
				_init_y: me.mid_y - 300,
				_desired_height: me.mid_y - 300,
				_x_bound: level_x,
				_x2_bound: level_x + level_w,
				_dive_height: if(upside_down = 1, me.mid_y + 500,me.mid_y + 100),
				_behavior: 'climb'
			})
				where level_x = level.dimensions[0]
				where level_y = level.dimensions[1]
				where level_w = level.dimensions[2]
				where level_h = level.dimensions[3]
		
			", 


	on_sprout: "[set(alpha,255),map(range(150),schedule(value, set_draw_size((1.0/150.0)*value))),schedule(50,set(animation,'exit_sprout')),schedule(150,set(_sprouted,true))]",


	on_process: "if(_sprouted, ((([set(custom_draw,
			[0.0,1.0,
			1.2,1.4,1.5,1.7,
			2.0,3.0,
			3.3,3.5,3.6,3.8,
			[upper_left[0]*scl(0.7),upper_left[1]*scl(0.7)],[upper_right[0]*scl(0.7),upper_right[1]*scl(0.7)],
			[upper_right[0]*scl(1.1),upper_right[1]], [upper_right[0]*scl(0.4),upper_right[1]], [upper_right[0]*scl(0.1),upper_right[1]],still,
			still,still,
			still,[upper_left[0]*scl(0.1),upper_left[1]], [upper_left[0]*scl(0.4),upper_left[1]], [upper_left[0]*scl(1.1),upper_left[1]],
			])]
		
			) where scl = def(decimal factor) sin(factor*90)
			where upper_left = [offset_x,offset_y]
			where upper_right = [offset_x,offset_y2]
			where still = [0,0]
		
			)
		
			where offset_x = ((sin(cycle*5)*150)*0.06) * dampen
			where offset_y = ((sin(    cycle*3)*80)*0.04 + y_bob) * dampen
			where offset_y2 = -((sin(40+ cycle*3)*80)*0.04 + y_bob) * dampen
		
			) where y_bob = sin(cycle*10)*5 * dampen * dampen
			where dampen =  if(animation = 'guard', 0.5, 1.0)
		
			) ",

	animation: [
	{
		"@base": true,
		image: "enemies/mushroom-boss1.png",
		palettes: "@include data/palettes.cfg:forest_palettes",
		feet_x: 80,
		attack_area: [0,60,159,159],
		body_area: "all",
	},
	{
		id: "normal",
		rect: [0,0,159,159],
		frames:5,
		reverse: true,
		duration: 3,
		feet_y: 160,
	},
	{
		id: "chargeup",
		image: "enemies/mushroom-boss2.png",
		rect: [0,0,159,175],
		frames:5,
		reverse: true,
		duration: 3,
		feet_y: 176,
		attack_area: [0,76,159,176],
	},
	{
		id: "attack_homing",
		image: "enemies/mushroom-boss3.png",
		rect: [0,0,159,175],
		frames:4,
		frames_per_row:2,
		reverse: true,
		duration: 3,
		feet_y: 176,
		events: "6:shoot",
		attack_area: [0,76,159,176],
	},
	{
		id: "attack_spawn",
		image: "enemies/mushroom-boss3.png",
		rect: [0,0,159,175],
		frames:4,
		frames_per_row:2,
		reverse: true,
		duration: 3,
		feet_y: 176,
		events: "6:spawn_baby",
		attack_area: [0,76,159,176],
	},
	{
		id: "attack_stream",
		image: "enemies/mushroom-boss3.png",
		rect: [0,0,159,175],
		frames:4,
		frames_per_row:2,
		reverse: true,
		duration: 3,
		feet_y: 176,
		attack_area: [0,76,159,176],
	},
	{
		id: "spit",
		image: "enemies/mushroom-boss3.png",
		rect: [0,0,159,175],
		frames:4,
		frames_per_row:2,
		reverse: true,
		duration: 3,
		feet_y: 176,
		attack_area: [0,76,159,176],
	},
	{
		id: "enter_guard",
		image: "enemies/mushroom-boss4.png",
		rect: [0,0,159,159],
		frames:4,
		frames_per_row: 2,
		duration: 6,
		feet_y: 160,
	},
	{
		id: "exit_guard",
		image: "enemies/mushroom-boss4.png",
		rect: [0,0,159,159],
		frames:4,
		frames_per_row: 2,
		play_backwards: true,
		duration: 6,
		feet_y: 160,
	},
	{
		id: "guard",
		image: "enemies/mushroom-boss4.png",
		rect: [160,160,319,319],
		frames:1,
		play_backwards: true,
		duration: 20,
		feet_y: 160,
	},
	{
		id: "sprout",
		image: "enemies/mushroom-boss5.png",
		rect: [0,0,159,159],
		frames:1,
		duration: 100000,
		feet_y: 160,
	},
	{
		id: "exit_sprout",
		image: "enemies/mushroom-boss4.png",
		rect: [0,0,159,159],
		frames:4,
		frames_per_row: 2,
		play_backwards: true,
		duration: 20,
		feet_y: 160,
	},
],

object_type: [ {
		id: "controller",
		always_active: true,
		hitpoints: 1,
		prototype: ["hittable"],
		team: "'evil'",


		on_begin_fight: "if(not _fight_started, [
							[
								[set(value.alpha, 255) | value <- level.chars, value.type = 'forest_blockage1'],
								set_solid(-704, -192, -576, -32, true),
								set_solid(2304, -320, 2496, -192, true),
							
								title('FIGHT!',200),
								lib.audio.play_music(me,'MushroomBossIntro.ogg'),
								set(_fight_started, true),
							
								trigger_initial_behavior,
								map(stalks, fire_event(value,'sprout'))
							],
							[
								set(me.is_a_boss, true)
								;
								me.constructor
								/*
									Specifically fire the constructor here after setting `is_a_boss`.  For perf reasons, we stopped polling the level to see if there are new bosses.  Rather, we just poll the current ones that are registered to see if they've died.  Objects register themselves as bosses as they're constructed, because 99% of the time they're not resident on the level until the fight starts.
								*/
							]
						])",
		
		on_postfight_outro: "schedule(500,[	set(hitpoints,1),
								set(invincible, -1),
								frogatto.do_post_victory_transport('relative-respite.cfg', 'target'),
								frogatto.store_event('mushroom_boss_fight_won',1)
								]) where frogatto = (obj frogatto_playable <- level.player)",
		on_die: "[set(hitpoints,1),set(me.is_a_boss, false)]",

		on_process: "process_behavior",
								
		
		properties: {
		#-------------------------- constructor/destructor logic --------------------------#
			epihittable_obj_constructor: "commands :: [
				if(level.player.get_stored_event('mushroom_boss_fight_won'), remove_object(me)), 
				set_max_hitpoints({casual: standard_thrown_damage * 3 * 10, challenging: standard_thrown_damage * 3 * 15}),
			]",


		#-------------------------- hittable overrides --------------------------#
			taxonomy: "TaxonomyType :: enum mushroom",
			custom_damage_table: "{
										enum neutral: 1.0,
										enum fire: 1.0,
										enum energy: 0.5,
										enum arcane: 0.25,
										enum acid: 0.0,
										enum impact: 0.0,
										enum impale: 1.0,
										enum lacerate: 1.0
									}",

			is_a_physical_gameplay_object: "false",

			hurt_velocity_y: 0,
			hurt_velocity_x: 0,

		#-------------------------- helpers --------------------------#
			mb_debug_active: "bool :: true",
			mb_clear: "commands :: null", //"if(mb_debug_active, clear())",
			mb_debug: "def(value) -> commands if(mb_debug_active, debug(value))",

			
		#--------------------------  vars --------------------------#
			_has_died: { type: "bool", default: false, persistent: false },
			_fight_started: { type: "bool", default: false, persistent: false },
			_behavior_mode_prng:	{ type: "class pseudo_random_numbers", init: "construct('pseudo_random_numbers',{_size_of_pool:3, _pool_size_multiplier: 1})", persistent: false },


			_phase_started_at: { type: "int", init: "0", persistent: false },
			_current_phase_random_timer: { type: "int", init: "0", persistent: false },
			_state: { type: "MushroomBossBehaviorModeTypes", init: "enum idle", persistent: false },

		#-------------------------- custom death logic --------------------------#
			handle_death: "def(interface {damage_type: DamageType} collide_with) -> commands
											 [map(stalks, bind_command(def() value.force_death()) ),
												clear_dangerous_items,fire_event(me, 'postfight_outro')]",
			
			clear_dangerous_items: "[remove_object(value) | value <- level.chars, value.type in ['mushroom_boss.big_shot','mushroom_boss.stream_shot', 'mushroom_jellyfish']]",

		#-------------------------- selectors for the heads/stalks --------------------------#
			stalks: "[obj mushroom_boss] <- filter(level.chars, value.type = 'mushroom_boss')",

			/* 
				As much as it might be 'elegant' to program the boss in a way that gracefully adapts to a fully arbitrary number of boss heads, it's kind of a pointless endeavor.  We're softly going to expect that there are 4 heads, and leave open the potential of things breaking if we change it later.  Some of these pieces of code will break down if i.e. there are less than two stalks.
			*/
			
			upper_stalks: "[obj mushroom_boss] <- sort(stalks, a.y < b.y)[0:2] asserting size(stalks) >= 2",
			lower_stalks: "[obj mushroom_boss] <- sort(stalks, a.y > b.y)[0:2] asserting size(stalks) >= 2",
			left_stalks: "[obj mushroom_boss] <- sort(stalks, a.x < b.x)[0:2] asserting size(stalks) >= 2",
			right_stalks: "[obj mushroom_boss] <- sort(stalks, a.x > b.x)[0:2] asserting size(stalks) >= 2",
			
			
			an_upper_stalk: "obj mushroom_boss :: shuffle(upper_stalks)[0]",
			any_stalk: "obj mushroom_boss :: shuffle(stalks)[0]",
		
			all_the_other_stalks: "def(obj mushroom_boss this_one) -> [obj mushroom_boss]  filter(stalks, value != this_one)",




			_chosen_head: { type: "obj mushroom_boss", init: "find_or_die(level.chars, value is obj mushroom_boss)", persistent: false }, 


			debug_head_choice:	"def(obj mushroom_boss the_head) -> commands
								mb_debug(
									if(the_head in upper_stalks,
										if(the_head in right_stalks,
											'upper right head',
											'upper left head'
										),
										if(the_head in right_stalks,
											'lower right head',
											'lower left head'
										)
									)
								)",	
							
							
		
			
		#-------------------------- core behavior --------------------------#
	/*
		STATEMENT OF INTENT:
		(copy-pasted from gazer boss, will amend once we've got coherent stuff to document here)
	
		The core design of this boss works in phases.  During each phase the boss will completely switch behavior; in some phases it fires a giant laser, in other ones it fires scattershots, etc.  After each phase is done, it picks a new one in a mostly random way (with a couple special rules).  Those special rules are that all the modes are 'shuffled' into a PRNG deck, so that we don't get a horrible random series of modes that never gives you the ammo you need to beat the boss.  The other special rules are some particulars about which modes can follow other modes, and allowing us to only randomly roll certain extra-difficult modes when the boss is closer to being dead.  We've wrapped all of this special logic in the `pick_random_behavior` function.

		There's no special treatment for 'starting' the fight - our `on_create` event just executes a particular attack mode we think is appropriate to start the fight off with (we could have decided to be random, but we felt that starting off by spawning the mooks was always ideal).	
	
		There is a global switch statement that controls everything (`process_behavior`).  This completely replaces our `on_process` code, and that event runs literally nothing but this function.  This switch statement simply runs a different set of processing code for each different attach mode the boss has.  Everything's different from mode-to-mode; there's no 'framework' wrapping each of the mode calls, because the few things they have in common were either function calls that need to have *different* parameters, or were the timing call to switch to the next mode (which also needs different parameters).
		
		That is likely the last key thing - how is timing and switching between modes handled?  For cycling to the next mode, there's really no 'standard' way.  For some of the modes, we use `_current_phase_random_timer` as a tracking variable, and e.g. set something like:
		```
			set(_current_phase_random_timer, 150 + (100 * number_of_mooks_to_spawn) + 300 + 1d50),
 		```
 		… as a way of triggering the next mode.  However, there's no standard behavior this triggers.  There's no 'watcher' or 'processing' code that decides the next mode we're going to trigger - that's *all* handled directly, and manually, in the `process_whatever` function for each mode.  The one thing that *is* standard is the `pick_random_behavior` function.   It's not mandatory to call this - several of our modes come in two parts (like the animation for the laser charging up, always needing to be perfectly bookended by the animation for the laser blasting away).  So the end of that mode doesn't use `pick_random_behavior`, and instead directly triggers the `begin_whatever` for the next mode.  The reason we've standardized the `pick_random_behavior` function is described up above.
 		
		A common idiom for ending a mode would be e.g:
		```
			if(cycle - _phase_started_at = _current_phase_random_timer, [
				…cleanup code goes here…
				pick_random_behavior,
			])
		```
	
		The only other thing you need to do when starting a mode is to set the current `_state` value via e.g. `set(_state, enum spawn_mooks)`, so the switch can do its thing.
	*/


	process_behavior: "				[		
										switch(_state,
											enum spawn_acid_rain_glob,		process_spawn_acid_rain_glob,
											enum spore_cloud_setup,			process_spore_cloud_setup,
											enum spore_cloud_emit,			process_spore_cloud,
											enum bomber_shroom_drop, 		null,
											enum idle,						null
										),
										//debug(cycle - _phase_started_at, ' : ', _current_phase_random_timer)
									]",
													
	pick_random_behavior: "commands :: [
 											switch(_behavior_mode_prng.get_next_value,
 												0, ;	begin_spawn_acid_rain_glob,
 												1, ;	begin_spore_cloud_setup,
 												2, ;	begin_spawn_acid_rain_glob, //begin_bomber_shroom_drop,
 											),
											_behavior_mode_prng.iterate_random_pool,
											; set(_phase_started_at, cycle)
										]",
										
	pick_specific_behavior: "def( commands new_behavior ) -> commands	[
																			; new_behavior,
																			; set(_phase_started_at, cycle)
																		]",
																		
	trigger_initial_behavior: "pick_specific_behavior( begin_spore_cloud_setup )",

	do_after_phase_timer: "def( commands next_commands ) -> commands [
		//debug(cycle, _phase_started_at, cycle - _phase_started_at, _current_phase_random_timer),
		if(cycle - _phase_started_at = _current_phase_random_timer,
			[ ; next_commands ]
		)
	]",
			
###-------------------------- attack pattern handling --------------------------###
			
			
			
#-------------------------- acid rain-glob attack --------------------------#
	/*
		In this mode, the boss spawns a glob of acid that floats horizontally, seeks a position over where the player is currently standing, bursts, and rains blobs of acid straight down
	*/


		begin_spawn_acid_rain_glob: "commands :: [
			mb_clear,
			mb_debug('MODE: begin_spawn_acid_rain_glob'), 
			set(_state, enum spawn_acid_rain_glob),
			set(_chosen_head, an_upper_stalk)
			;
			debug_head_choice(_chosen_head),
			set(_current_phase_random_timer, 800 + 1d200 ),
			
			_chosen_head.set_behavior('guard'),
		]",
	
		process_spawn_acid_rain_glob: "commands :: [
			if(cycle - _phase_started_at = 50, [
				spawn('mushroom_boss.acid_dropper_big_shot', _chosen_head.x, _chosen_head.y, {lifetime: _current_phase_random_timer}),
				set(_chosen_head.animation, 'spit'),
			]),
			do_after_phase_timer( [debug('after_timer'),pick_random_behavior] )
		]",
	
	
		
#-------------------------- spore-cloud attack --------------------------#
	/*
		In this mode, the boss fires a cloud of spores that make a whole quadrant of the map deadly.
	*/

	//start with some 'chargeup' effects to telegraph the attack
		begin_spore_cloud_setup: "commands :: [
			mb_clear,
			mb_debug('MODE: begin_spore_cloud_setup'), 
			set(_state, enum spore_cloud_setup),
			set(_chosen_head, any_stalk)
			;
			debug_head_choice(_chosen_head),


			set(_current_phase_random_timer, 100 )
		]",

		process_spore_cloud_setup: "commands :: [
		
			do_after_phase_timer( pick_specific_behavior(begin_spore_cloud) )
		]",
				
				
				
	//the actually do the attack
		begin_spore_cloud: "commands :: [
			mb_debug('MODE: begin_spore_cloud'), 
			set(_state, enum spore_cloud_emit),
			;


			set(_current_phase_random_timer, 500 + 1d75)
		]",


		process_spore_cloud: "commands :: [
			if(level.cycle % 5 = 0,
				do_spore_shot
			),
			do_after_phase_timer( pick_random_behavior ),
		]",
		
		
		do_spore_shot: "commands :: [
			spawn('mushroom_boss.stream_shot',
				shot_offset.x,
				shot_offset.y,
			{
				velocity_x: shot_velocity.x,
				velocity_y: shot_velocity.y,
				rotate: shot_angle
			})		
		]
			where shot_velocity = { x: decimal, y: decimal } :: { x: shot_speed * cos(shot_angle), y: shot_speed * sin(shot_angle)}

			where bloom_offset =  { x: decimal, y: decimal } :: {
				x: _chosen_head.mid_x + bloom_dist * cos(shot_angle),
				y: _chosen_head.mid_y + bloom_dist * sin(shot_angle)
			}
			where shot_offset =  { x: decimal, y: decimal } :: {
					x: _chosen_head.mid_x + shot_dist * cos(shot_angle),
					y: _chosen_head.mid_y + shot_dist * sin(shot_angle)
				}
			where bloom_dist = -150
			where shot_dist = 130

			where shot_speed = (500 + 1d200)
			where shot_angle =	(_chosen_head.rotate - 90) + /* first adjust for coordinate system */
								(45 - 1d90) /* then apply a random factor so it's a spread shot */ 
		",
			
#-------------------------- bomber-shroom-drop --------------------------#
	/*
		A bomb shroom, which the player can light on fire, drops from above onto the wooden scaffolding.  Lighting it on fire acts like lighting a fuse - it sets a timer upon which the shroom will explode, dealing lots of damage to the boss.
	*/


		begin_bomber_shroom_drop: "commands :: [
									mb_debug('MODE: bomber_shroom_drop'), 
									set(_state, enum spore_cloud_setup),
									set(_current_phase_random_timer, 50 + (100 + 640) + (50 + 1d75) )

							]",
			
			
		},

		types: {
			MushroomBossBehaviorModeTypes: "enum {
				spawn_acid_rain_glob,
				spore_cloud_setup,
				spore_cloud_emit,
				bomber_shroom_drop,
				idle,
			}",
		},


		
		animation: {
			id: "normal",
			image: "enemies/mushroom-boss1.png",
			rect: [0,0,1,1],
		},
		
	},
	{
		id: "stream_shot",
		always_active: true,
		prototype: ["shot"],
		traction_in_air: 1000,
		friction: 0000,
		on_collide_level: "null",
		collide_dimensions: ["~player","~enemy","~hazard","~obstruction"],
		zorder: "@include data/zorder.cfg:in_front_of_parallax_objects",
		
		on_create: "[
			schedule(100+1d250, force_death()),
			spawn('mushroom_boss.stream_shot_particles', mid_x, mid_y, {facing: facing, parent: me, relative_x: 0, relative_y: 0, time_to_die: 30, initial_spawn_rate: 250 }),
			set(facing, if(1d2=2,1,-1)),
			set(rotate, 1d360),
			spawn('mushroom_boss.big_shot_impact',mid_x,mid_y,facing)
		]",
		on_process: "set(velocity_xy, [velocity_xy.x * 0.99, velocity_xy.y * 0.99]) ",
		on_end_anim: "[animation('normal'),set(rotate, 1d360)]",
		
		properties: {
			adjust_size: "set(scale, 1.0 - 0.001 * cycle)",
			attack_damage: "if(higher_difficulty,2,1)",

			death_effects: "def(string type) -> commands [
				spawn('mushroom_boss.big_shot_impact',mid_x,mid_y,facing)
			]",
		},
		
		animation: {
			id: "normal",
			image: "enemies/mushroom-boss-shots.png",
			rect: [1,109,18,126],
			accel_y: 0,
			duration: 2,
			frames: 8,
			pad: 3,
			attack_area: "all",
		},
	},
	{
		id: "stream_shot_particles",
		prototype: ["effects_attache"],

		properties: {
			initial_spawn_rate: { type: "int", dynamic_initialization: true },

			do_setup: "add_particles('particles')",
			turn_on: "set(particle_systems['particles'].spawn_rate, initial_spawn_rate)",
			turn_off: "set(particle_systems['particles'].spawn_rate, 0)",
		},

		particle_system: {  /* min/max values are offset by the w/h values of the graphics, since the graphical drawing position is naively centered on xy rather than mid_xy */
			id: "particles",
			type: "simple",
			spawn_rate: 250,
			time_to_live: 28,
			min_x: -50,
			max_x: 20,
			min_y: -50,
			max_y: 20,
			velocity_x: -300,
			velocity_y: -300,
			velocity_x_random: 600,
			velocity_y_random: 600,
		
			#color=255,255,255,255
			#delta_a: 8,
			animation: {
				id: "sparkle",
				image: "enemies/mushroom-boss-shots.png",
				rect: [1,76,30,105],
				pad: 3,
				frames: 7,
				duration: 4,
			},
		},
	},


	{
		id: "big_shot",
		always_active: true,
		prototype: ["shot"],
		traction_in_air: 1000,
		friction: 2000,
		on_collide_level: "null",
		zorder: "@include data/zorder.cfg:in_front_of_parallax_objects",
		
		on_create: "[schedule(200+1d350,die()), add_particles('smoke'),spawn('mushroom_boss.big_shot_impact',mid_x,mid_y,facing)] ",
		on_end_anim: "animation('normal')",
		on_die: "[spawn('mushroom_boss.big_shot_impact',mid_x,mid_y,facing), /*spawn('mushroom_boss.ammo', mid_x, mid_y, {time_spat:level.cycle, animation:'on_back'})*/]",
		
		properties: {
			accel_towards_player: "[set(accel_x, if(level.player.mid_x > mid_x, 20, -20)),set(accel_y, if(level.player.mid_y > mid_y, 20, -20))]",
			adjust_size: "set(scale, 1.0 - 0.001 * cycle)",
			attack_damage: "((400 - me.cycle)/100)",
		},

		on_process: "[accel_towards_player, adjust_size]",

		animation: [
		{
			id: "normal",
			image: "enemies/mushroom-boss-shots.png",
			rect: [0,0,37,37],
			duration: 2,
			frames: 10,
			attack_area: "all",
		},
		],
		particle_system: {
			id: "smoke",
			type: "simple",
			spawn_rate: 500,
			time_to_live: 50,
			min_x: -10,
			max_x: 42,
			min_y: -10,
			max_y: 42,
			velocity_x: -200,
			velocity_y: -200,
			velocity_x_random: 400,
			velocity_y_random: 400,
		
			#color=255,255,255,255
			#delta_a: 8,
			animation: {
				id: "sparkle",
				image: "enemies/mushroom-boss-shots.png",
				x: 0,
				y: 55,
				w: 16,
				h: 16,
				pad: 0,
				frames: 6,
				duration: 4,
			},
		},
	},
	{
		id: "acid_dropper_big_shot",
		prototype: ["seeker_flying"],
		always_active: true,
		solid_area: null,
		
		properties: {
			#-------------------------- prototype behavior --------------------------#
			altitude_adjustment: "( sin(cycle*5+1000)/50)",
			lifetime: { type: "int", dynamic_initialization: true }, 

			player_pos: "level.player.mid_xy",
			
			custom_process_fly: "if(me.cycle > lifetime, force_death())",
		},
		
		
		on_end_anim: "set(animation, animation)",
		
		on_timer: "me.fly_to([{x: player_pos.x, y: player_pos.y - 250}]) ",
		timer_frequency: 15,
		
		animation: [{
			"@base": true,
			image: "effects/particles5.png",
			rect: [521,1,582,62],
			duration: 5,
			frames: 9,
			frames_per_row: 3,
			pad: 3,
		},{
			id: "normal",
		},{
			id: "turn",
			frames: 1,
			duration: 1,
		},{
			id: "fly",
			accel_x: 10,
		}],
	},
	{
		id: "big_shot_impact",
		always_active: true,
		
		on_end_anim: "die()",
		animation: {
			id: "normal",
			image: "enemies/mushroom-boss-shots.png",
			rect: [160,39,191,70],
			duration: 5,
			frames: 7,
		},
	},
	{
		id: "ammo",
		prototype: ["throwable_projectile"],
		properties: {
			is_player_ammo: "true",
			title: "~Spore Core~",
			description: "~The dangerous shell of a toxic homing weapon.~",
			taste: "~Sweet revenge!~",
		},
		animation: [
		{
			"@base": true,
			image: "enemies/mushroom-boss-shots.png",
			rect: [0,39,15,54],
			accel_y: 80,
			frames: 1,
			duration: 10,
		},
		{
			id: "normal",
			body_area: "all",
		},
		{
			id: "thrown",
			body_area: null,
			thrown_area: "all",
		},
		{
			id: "on_back",
			body_area: "all",
			thrown_area: null,
		}],
	},
	{
		id: "corpse",
		always_active: true,
		prototype: ["standard_values"],

		on_create: "[
			sinusoidal_transition({period: 400, _init_theta:1.0, _length_theta:-1.0, addend:0, coefficient:255, obj:me, aspect:'alpha'}),
			sound('mushroom-boss-death.wav')
		]",
		
		on_end_anim: "die()",
		animation: {
			id: "sprout",
			image: "enemies/mushroom-boss5.png",
			rect: [0,0,159,159],
			frames:1,
			duration: 100000,
			palettes: "@include data/palettes.cfg:forest_palettes",
			feet_x: 80,
			feet_y: 160,
		},
	},
	],

}