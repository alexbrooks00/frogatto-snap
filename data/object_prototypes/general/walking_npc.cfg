{
id: "walking_npc",
prototype: ["standing_npc"],
zorder: "@include data/zorder.cfg:npcs",
friction: 1000,
traction: 1000,

editor_info: {
	category: "NPCs",
	help: "start mode: Action to start the level in.\nturns_at_cliff: If true, the character will turn before it falls off a cliff. Doesn't apply to walking into one.\npotters: The object will sort of faff about, randomly switching directions, standing still, and walking.\npotter_timeout: Number of cycles the object will faff about for.",
},

properties: {
#-------------------------- constructor/destructor logic --------------------------#
	epi_standing_npc_constructor: "commands :: [
		if(start_mode = 'stand',
			set(_is_walking, false),
			set(_is_walking, true)
		)
		;
		initialize_regular_behavior,
		fire_event('enter_level'),
	] asserting max_x > min_x",




#-------------------------- editor items --------------------------#
		min_x: { type: "int", init: "mid_x - 100", editor_info: { type: "x", value: "midpoint_x - 200", } },
		max_x: { type: "int", init: "mid_x + 100", editor_info: { type: "x", value: "midpoint_x + 200", } },
		start_mode: { type: "string", default: "walk", editor_info: { type: "enum", enum_values: ["stand","walk"] } },
		turns_at_cliff: { type: "bool", default: true, editor_info: { type: "boolean", value: "true" } },
		potters: { type: "string", default: "never", editor_info: { type: "enum", enum_values: ["never","limits","always"] } },
		potter_timeout: { type: "int", default: 100, editor_info: { type: "int", value: "100" } },

#-------------------------- vars --------------------------#
		_current_special_walk_anim: { type: "string", default: '' },	
		_last_started_pottering: { type: "int", default: -100 },	
		_target: { type: "int|null", default: null },					//If we are walking to a target, this is it.
		_target_callback: { type: "null|function()->commands", default: null },		//The event to fire, when we reach the target. (Will be fired in addition to reach_target.)

		_is_walking: { type: "bool", default: true },

#-------------------------- cutscene commands --------------------------#
	walk_to: "def(int target_x, null|function()->commands callback=null) -> commands execute(me, [
			set(_target, target_x),
			if(callback != null, set(_target_callback, callback)),
			set(_is_walking, true)
		])",


#-------------------------- animation sets --------------------------#
	/*
		At least for `standing_animations` and `walking_animations`, these are meant to be overloaded by individual inheritors.

		These are intended to let us check if we should skip interrupting the animation if it's already in progress; `core_anims` is a fallback to let us just repeat any 'weird' or custom animation automatically, and walking animations allows us to do a little introspection to determine if we are actively in a walking anim (note that this is independent from a mode - we may be in a turning animation, but consider ourselves mechanistically in 'walking mode', and intend to resume walking as soon as whatever other animation completes).
	*/
	core_anims: "[string] :: ['stand','turn','walk']",
	walking_animations: "[string] :: ['walk']", 
	



#-------------------------- core behavior --------------------------#
	initialize_regular_behavior: "if(start_mode = 'stand', start_standing, start_walking)",



	core_processing: "commands :: [
		if(self.is_at_target,
			fire_event(self,'reach_target') 
		),	

		if(should_potter and (not is_outside_limits),
			start_pottering
		),

		if(should_turn,
			turn_around,
		),

	]",

	end_anim_decisions: "commands :: [
		if(_is_walking,
			change_to_walk_anim,
			change_to_stand_anim
		)
	]",

	change_to_walk_anim: "set(animation,
		if(_current_special_walk_anim != '',
			_current_special_walk_anim,
			'walk'
		)
	)",



#-------------------------- behavior --------------------------#
	start_standing: "commands :: [
		set(_is_walking, false),
	]",


	start_pottering: "[
		if(1d2 = 1,
			start_standing,
			start_walking
		),
		if(level.cycle - _last_started_pottering > potter_timeout,
			set(_last_started_pottering,level.cycle)
		)
	]",


	start_walking: "commands :: [
		set(_is_walking, true),
	]",
	

	/*
		Remember that this is NOT `can_turn`; this shouldn't contain hard-limits on whether we're even -allowed- to turn, such as checking for animation availability, or timeouts, etc.  This is merely a behavioral expression of whether our character 'wants to' turn; `can_turn` gets checked inside of `turn_around` and will do any and all of the necessary safety checks for us.
	*/
	should_turn: "bool ::
		if(_is_walking,
			if(not _target,
				/*
					If we don't have a target, then we've got some pretty tame/normal turning behavior. Basically we just look at a pair of bounding limits for where we're allowed to walk, and if we're outside of those, then we need to turn around and go back.  We make a similar caveat for cliffs, treating them like limits.
				*/
				if(turns_at_cliff and (not is_there_flat_ground_ahead_of_us(cliff_margin)),
					true,
					if(is_outside_limits,
						true,
						
						/*
							Normally we never turn in this case, we just keep walking/standing but there's case where we do â€” if we're 'pottering', we may decide to randomly turn, here. 
						*/
						if(potters = 'limits' or potters = 'always',
							should_potter,
							false
						)
					)
				)
					where margin = 50
					where cliff_margin = 110,


				/* 
					if we DO have a target, then all the above rules are off; go ahead and walk off cliffs, or leave our bounds, the target is more important.
				*/
				if((_target < self.mid_x and facing > 0) or (_target > self.mid_x and facing <= 0),
					true,
					false
				)
			),




			/*
				If we're just completely standing still, we broadly want to defer to the standing behavior in its entirety, with one exception.

				First, if we're talking to someone, defer to the standard standing behavior, because that has the correct stuff for facing the person being talked to.
				If we're not talking to someone though, and we potter, we'll typically want to ignore the normal facing contraints and walk around and do our own thing.
			*/
			if(frogatto.currently_speaking_to != null,
				should_turn__standing_npc_behavior,
				if(potters = 'limits' or potters = 'always',
					should_potter,
					should_turn__standing_npc_behavior
				)
			)
		) where frogatto = (obj frogatto_playable <- level.player)",
							
	should_potter: "bool :: if(_target or (frogatto.currently_speaking_to != null),
								false,  /*if we have a target, don't potter at all.  Same with conversing with someone.*/
								if((level.cycle - _last_started_pottering) < potter_timeout, 
									false,
									if(1d2 = 2,
										false,
										if(potters = 'always',
											true,
											if(potters = 'limits' and is_outside_limits,
												true,
												false
											)
										)
									)
								)
							) where frogatto = (obj frogatto_playable <- level.player)",
	
	is_outside_limits: "bool :: 
				if(facing > 0,
					if(mid_x + img_margin > max_x, true, false), 
					if(mid_x - img_margin < min_x, true, false)
				) where img_margin = img_w/2",
	
	
	is_at_target: "bool :: if(_target and abs(_target - me.mid_x) < 20, true, false)",
	
},
	

					
on_resume: "initialize_regular_behavior",

on_process: "core_processing",


//note - it's REALLY important that target_callback be last - if this gets fired during a dialogue, the other commands after target_callback don't get executed until the dialogue is finished (which essentially breaks target-seeking entirely)	
on_reach_target: "[
	set(start_mode, 'stand'),
	start_standing,
	change_to_stand_anim,
	set(_target,null),
	set(_target_callback, null),
	if(_target_callback != null, _target_callback() ),
]",

}
