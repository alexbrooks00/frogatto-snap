{
id: "wobbly_thing",
prototype: ["cosmetic_effects"],
platform_area: [0,16,79,17],
is_strict: false,
has_feet: false,
zorder: "@include data/zorder.cfg:exterior_decor",
properties: {
	springiness: 1,
	spring_amount: 3500,
	bounce_roundness: 120,
	material_sound: "enum fungus",
	recombine_pairwise: "def([decimal|[decimal,decimal]] list) -> [[decimal, [decimal,decimal]]]
										 ([[decimal, [decimal,decimal]]] <- zip( ([decimal] <- list[0 : size(list)/2]), ([[decimal,decimal]] <- list[size(list)/2: size(list)]), [a,b]))",
	recombine_serially: "def([[decimal, [decimal,decimal]]] list) -> [decimal|[decimal,decimal]]
										 map(list,value[0]) + map(list,value[1])",
	convert_to_unit_square_coords: "def([[decimal, [decimal,decimal]]] list) -> [[[decimal, decimal], [decimal,decimal]]]
														map(filter(list, value[0] >= 0.0 and value[0] < 1.0), [[((decimal <- value[0]) - 0.5)*2, -1.0] , ([decimal,decimal] <- value[1]) ]) +
														map(filter(list, value[0] >= 1.0 and value[0] < 2.0), [[1.0,  ((decimal <- value[0]) - 1.5)*2] , ([decimal,decimal] <- value[1]) ]) +
														map(filter(list, value[0] >= 2.0 and value[0] < 3.0), [[-((decimal <- value[0]) - 2.5)*2, 1.0 ] , ([decimal,decimal] <- value[1]) ]) +
														map(filter(list, value[0] >= 3.0 and value[0]<= 4.0), [[-1.0, -((decimal <- value[0]) - 3.5)*2] , ([decimal,decimal] <- value[1]) ])",
	flip_if_facing_left_or_upside_down: "def([[[decimal, decimal], [decimal,decimal]]] list) -> [[[decimal, decimal], [decimal,decimal]]]
												map(list, [[value[0][0] * facing,value[0][1] * v_flip] ,value[1]]) where v_flip = -upside_down",
	convert_back_to_serial_coords: "def([[[decimal,decimal], [decimal,decimal]]] list) -> [[decimal, [decimal,decimal]]]
												map(filter(list, value[0][1] = -1.0 and value [0][0] <  1.0), [( value[0][0]/2 + 0.5),value[1]]) + 
												map(filter(list, value[0][0] =  1.0 and value [0][1] <  1.0), [( value[0][1]/2 + 1.5),value[1]]) +
												map(filter(list, value[0][1] =  1.0 and value [0][0] > -1.0), [(-value[0][0]/2 + 2.5),value[1]]) +
												map(filter(list, value[0][0] = -1.0 and value [0][1] > -1.0), [(-value[0][1]/2 + 3.5),value[1]])",
	sort_back_to_serial_order: "def([[decimal, [decimal,decimal]]] list) -> [[decimal, [decimal,decimal]]]
										 sort(list, a[0] < b[0])",
	
	converted_custom_draw_params: "[decimal|[decimal,decimal]] ::
						recombine_serially( sort_back_to_serial_order( convert_back_to_serial_coords( flip_if_facing_left_or_upside_down( convert_to_unit_square_coords( recombine_pairwise( custom_draw_params))))))",

	custom_draw_params: "[decimal|[decimal,decimal]] :: (
		offsets +
		map(offsets, value + 2.0) +
		map(offsets, wt(value)) +
		map(offsets, wb(value))
	)
		where offsets = dump(create_offsets(node_count))
		where wt = def(decimal offset) generate_wobble(offset, 1, true)
		where wb = def(decimal offset) generate_wobble((1.0 - offset) + 3.14 * 1.0, -1, false)",
	

		node_count: "int :: 10",
		generate_wobble: "def(decimal offset, int polarity, bool is_top) -> [decimal,decimal] [
			0 * facing,
			(
				polarity *
				10.0 *				//just a coefficient to give the wobble width
				sin(
					offset *			// the part that tells it where we are, horizontally
					392.5 +				// this multiples the 'where we're at horizontally' to make it so we go most of the way through a 'wave' by the time we get through the length. 
					cycle*10.0			// this gets 'time' involved; this is how fast the wobble propagates
				) *
				//sin(
					1.0 //(offset) //* 180
				//)
			)
		]",
		
		create_offsets: "def(int item_count) -> [decimal] map(range(item_count), (value)/decimal(item_count - 1) )",
			
#-------------------------- vars --------------------------#
	_magnitude: { type: "decimal", default: 0, persistent: false },
},


on_process: "[
	set(_magnitude, sin(cycle)*10),
//	debug(_magnitude),

	set(draw_area, [0, 0, img_w * 3 + sin(cycle)*20, img_h/2]),

	set(custom_draw, converted_custom_draw_params)
]",


on_jumped_on: "[play_sound__falloff('mushroom-bounce')]",
on_bounced_on: "[play_sound__falloff('mushroom-bounce'),set(_magnitude,25)]",

editor_info: {
	category: "props",
},

animation: [
	{
		id: "normal",
		image: "props/dungeon-conveyor-belt-top.png",
		x: 0,
		y: 0,
		w: 16,
		h: 16,
		palettes: "@include data/palettes.cfg:dungeon_palettes",
	},
],
}