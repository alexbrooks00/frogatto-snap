{
	id: "effects_attache_batch",
	prototype: ["effects_attache"],

	types: {
		HSLColor: "{ h: decimal, s: decimal, l: decimal }",
		HSLGradientElement: "{ hsl: HSLColor, offset: decimal }",
	},


	properties: {

		do_setup: "commands :: if(not _constructed, [
			initialize_position,
			spawn_color_attache,
			spawn_particle_sets,
			spawn_legacy_particle_sets,
			spawn_sprite_attaches,
		])",
	
		turn_off: "commands :: [
			;map(subordinate_attaches, value.schedule_death_cleanup)
		]",


		subordinate_attaches: { type: "[obj effects_attache]", default: [] },

		is_past_timeout: "bool :: level.cycle - cycle_spawned_at > timeout",
		timeout: { type: "int", dynamic_initialization: true },
		cycle_spawned_at: { type: "int", init: "level.cycle" },
		
			//this gets set by the spawner as a way to compare whether it's based on a particular status the spawner has (such as being poisoned), rather than on a simple timeout
		special_death_criterion: { type:"null|function(obj transient_object)->bool", init: "null" },
				
		should_die: "bool ::
						if(special_death_criterion != null,
							special_death_criterion(_parent_obj),
							is_past_timeout
						)",
		
	#-------------------------- configuration --------------------------#
			//in all honesty, we'll only need one of these per batch.
		color_adjustment_hsl_grad: "effects_preset_data.hsl_grad",
		
		
		spawn_color_attache: "
			[
				add_object(attache),
				add(subordinate_attaches, [attache]),
			] where attache = object('effects_attache_recolor', {
				colors_hsl: color_adjustment_hsl_grad,
				x: mid_x,
				y: mid_y,
				parent: _parent_obj,
				time_to_die: 0,
				effects_preset: (obj effects_attache_batch <- me).effects_preset,
			})
		",
		
			//these, however, we could have a bunch of - same with the sounds
		//particle_types: { type: "[string]", init: "[]" },
		particle_types: "effects_preset_data.particle_types",
		legacy_particle_types: "effects_preset_data.legacy_particle_types",
		sprite_types: "effects_preset_data.sprite_types",
		

		spawn_particle_sets: "commands :: map(particle_types,
			[
				add_object(attache),
				add(subordinate_attaches, [attache]),
			] where attache = object('particle_attache', {
				_particle_type: value,
				x: mid_x,
				y: mid_y,
				parent: _parent_obj,
				time_to_die: 100,
			})
		)",	

		spawn_legacy_particle_sets: "commands :: map(legacy_particle_types,
			[
				add_object(attache),
				add(subordinate_attaches, [attache]),
			] where attache = object('legacy_particle_attache', {
				_particle_type: value,
				x: mid_x,
				y: mid_y,
				parent: _parent_obj,
				time_to_die: 100,
			})
		)",	

		spawn_sprite_attaches: "commands :: map(sprite_types,
			[
				add_object(attache),
				add(subordinate_attaches, [attache]),
			] where attache = object('sprite_attache', {
				_sprite_type: value,
				x: mid_x,
				y: mid_y,
				parent: _parent_obj,
				time_to_die: 0,
			})
		)",

	#-------------------------- presets --------------------------#
		effects_preset: { type: "VisualEffectAttacheBatchType", init: "enum fire" },
		
		effects_preset_data: "	{
									hsl_grad: [HSLGradientElement],
									particle_types: [string],
									legacy_particle_types: [string],
									sprite_types: [string],
								} ::
								_effects_preset_data_table[effects_preset]",
		
						
		
		_effects_preset_data_table: "
			{
				VisualEffectAttacheBatchType ->	{
										hsl_grad: [HSLGradientElement],
										particle_types: [string],
										legacy_particle_types: [string],
										sprite_types: [string],
									}
			} ::
			{
				enum fire:				{
											hsl_grad:	[
															{hsl: {h: 0.05, s: 1.0, l: 1.0}, offset: 0.0},
															{hsl: {h: 0.35, s: 1.0, l: 1.0}, offset: 0.5},
															{hsl: {h: 0.85, s: 1.0, l: 1.0}, offset: 1.0},
														],
											particle_types:			['status_burning'],
											legacy_particle_types:	[],
											sprite_types:			[],
										},
				enum explosive:			{
											hsl_grad:	[
															{hsl: {h: 0.05, s: 1.0, l: 1.0}, offset: 0.0},
															{hsl: {h: 0.35, s: 1.0, l: 1.0}, offset: 0.5},
															{hsl: {h: 0.85, s: 1.0, l: 1.0}, offset: 1.0},
														],
											particle_types: 		['status_burning','status_explosive'],
											legacy_particle_types:	[],
											sprite_types:			[],
										},
				enum acid:				{
											hsl_grad:	[
															{hsl: {h: 0.35, s: 1.0, l: 1.25}, offset: 0.0},
														],
											particle_types:			['status_poisoned'],
											legacy_particle_types:	[],
											sprite_types:			[],
										},
				enum poison:			{
											hsl_grad:	[
															{hsl: {h: 0.35, s: 1.0, l: 1.25}, offset: 0.0},
														],
											particle_types: 		['status_poisoned'],
											legacy_particle_types:	[],
											sprite_types:			[],
										},
				enum arcane:			{
											hsl_grad:	[
															{hsl: {h: 0.8, s: 1.0, l: 0.9}, offset: 0.0},
														],
											particle_types: 		['status_frozen'],
											legacy_particle_types:	[],
											sprite_types:			[],
										},
				enum frozen:			{
											hsl_grad:	[
															{hsl: {h: 0.6, s: 1.0, l: 1.6}, offset: 0.0},
														],
											particle_types: 		['status_frozen'],
											legacy_particle_types:	[],
											sprite_types:			[],
										},
				enum energy:			{
											hsl_grad:	[
															{hsl: {h: 0.6, s: 1.0, l: 1.6}, offset: 0.0},
														],
											particle_types: 		['status_frozen'],
											legacy_particle_types:	[],
											sprite_types:			[],
										},
				enum bubble_trapped:	{
											hsl_grad:	[
															{hsl: {h: 0.6, s: 1.0, l: 1.6}, offset: 0.0},
														],
											particle_types: 		['status_frozen'],
											legacy_particle_types:	['underwater_bubbles'],
											sprite_types:			['bubble_trap'],
										}
			}",
			
	},


	on_process: "if(should_die, schedule_death_cleanup)",		

}
