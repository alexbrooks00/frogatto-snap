//Show the currently selected ability, such as 'tongue' or 'firebreath'.
{
	id: "ability_secondary_display",
	prototype: ["hud_component"],

	properties: {
		player: "level.player",
		


#-------------------------- components --------------------------#
		graphic: {
			type: "obj hud_component",  
			init: "object('ability_secondary_display.graphic',0,0,1, {zsub_order: -1})",
		},
		

		graphic_post1: {
			type: "obj hud_component",  
			init: "object('ability_secondary_display.graphic',0,0,1)",
		},

		graphic_post2: {
			type: "obj hud_component",  
			init: "object('ability_secondary_display.graphic',0,0,1)",
		},

		graphic_pre1: {
			type: "obj hud_component",  
			init: "object('ability_secondary_display.graphic',0,0,1)",
		},

		graphic_pre2: {
			type: "obj hud_component",  
			init: "object('ability_secondary_display.graphic',0,0,1)",
		},

		overlay: {
			type: "obj hud_component",  
			init: "object('ability_secondary_display.overlay',0,0,1)",
		},


#-------------------------- core behavior --------------------------#
		max_graphic_cells: "[obj hud_component] ::
							[graphic_pre2, graphic_pre1, graphic, graphic_post1, graphic_post2]",

		
		graphic_cells: "[obj hud_component] :: max_graphic_cells[
			/*
				A little bit of black magic here, to start us deeper into the list so we get i.e. [graphic_pre1, graphic, graphic_post1] rather than [graphic_pre2, graphic_pre1, graphic].  Essentially we need it centered so that `graphic` is guaranteed to be in the set, somewhere.  The object represented by `graphic` specifically represents the current ability/powerup.
			*/
			start_val
			:
			start_val + min( size(player.ability_list), 5 )
		] where start_val = max(0,
			lib.math.floor( (5 - size(player.ability_list)) / 2.0 )
		)",

		set_to_animation: "def( obj hud_component target, [int,int,int,int] rect) -> commands
			set(target.animation, {
				image: 'gui/hud4.png',
				duration: -1,
				id: 'normal',
				rect: rect
			},
		)",

		has_just_changed: "bool :: player.last_toggled_secondary_item = player.cycle - 1",  //We're putting this a frame in the past because I'm not sure we can consistently rely on the player object to execute before this object, and if we were ever in a situation where that happened, the flag wouldn't be set by the time we checked this (and the player's cycle would probably be updated even before its processing, so effectively this would get "missed".  Maybe - it being a bug is contingent on that second thing actually being true, but this way there's no bug either way.

		do_carousel_anim: "commands :: 
			map(graphic_cells, 
				[
					//debug(cycle),
					set(value.alpha_proxy, 255),
					set(value.mid_x, mid_x  + 90*index),
					;
					animate(value, {
							mid_x: mid_x  + 90*index,
							mid_y: mid_y ,
						},{
							duration: 60,
							name: 'hud_item_carousel',
							replace_existing: true,
							on_complete: anim2
					}) where anim2 = animate(value, {
							alpha_proxy: if(index = index(graphic_cells, graphic), 255, 0),
							mid_x: mid_x ,
							mid_y: mid_y ,
						},{
							duration: 35,
							name: 'hud_item_carousel',
							replace_existing: true,
							easing: lib.math.ease_in_sine
					})
				]
			)
		",
		

#-------------------------- constructor/destructor --------------------------#
		constructor: "[
			map(graphic_cells, add_object(value)),
			map(graphic_cells, [
				set(value.mid_x, mid_x),
				set(value.mid_y, mid_y),
			]),
			add_object(overlay),
			set(overlay.parent, graphic)
			;
			set(overlay.relative_x, 0),
			set(overlay.relative_y, 0),
			set(me.alpha_proxy, 0),
		]",

		destructor: "[
			map(max_graphic_cells, remove_object(value)),
			remove_object(overlay),
		]"
	},
	
	on_start_level: "constructor", //When we enter a new level, the frogatto object retains the reference to ability_display object. Frogatto takes care of adding this object to the level. However, this object must add any objects it added previously. Since the object is only created once, on_create only ever fires once. Since the first level is not entered when this object is around, on_start_level only fires every time after the first level we enter.
	
	on_create: "constructor",
	on_being_added: "constructor",
	on_being_removed: "destructor",
	
	//Sync UI state with Frogatto.
	on_process: "
		if(player is obj frogatto_playable,
			[
				map(graphic_cells,
					set_to_animation(value, item_info(index).hud_img_rect )
				),
				
				if(has_just_changed,
					do_carousel_anim
				),				
			]
				where item_info = (def(int offset) -> class inventory_item
				(
					if(normalized_index = 0, 
						player.item_info(player.current_secondary_item),
						player.item_info( player.nth_item_away_from_current_item_of_category(normalized_index, enum secondary_item) )
					)
					/*
						There's a little bit of 'special logic' here in the where clause - this is intended to take our offset (i.e. which of the 5 graphical cells we could be looking at), and change the values from `[0, 1, 2, 3, 4]`, to being `[-2, -1, 0, 1, 2]`.  0 is meant to specially represent the -current- ability the player has selected.
					*/
				) where normalized_index = offset - index(graphic_cells, graphic)
			)
		)
	",
	
	animation: {
		id: "bg", 
		image: "gui/hud3.png",
		rect: [80,0,127,47],
	},
	
	object_type: [
		{
			"@base": true,
			prototype: ["hud_component"],
		},
		{
			id: "graphic",
			zsub_order: -2,
			
			animation: [{
				"@base": true,
				image: "gui/hud4.png",
			}],

			properties: {
				frame: {
					type: "obj ability_secondary_display.frame",  
					init: "object('ability_secondary_display.frame',0,0,1, {parent: me})",
				},
			},

			on_create: "add_object(frame)",
			on_being_added: "add_object(frame)",
			on_being_removed: "remove_object(frame)",
		},

		{
			id: "frame",
			zsub_order: 0,
			
			animation: [{
				id: "normal",
				image: "gui/hud3.png",
				rect: [80,0,127,47],
			}],
		},


		{
			id: "overlay",
			zsub_order: 2,
			
			animation: [{
				id: "normal",
				image: "gui/hud3.png",
				rect: [128,56,183,111],
			}],
		},
		
	],
	
	
}