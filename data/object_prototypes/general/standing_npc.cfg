{
/*Implementor requires "stand" animation.
Properties: stand - The character starts standing in one place.
*/
id: "standing_npc",
prototype: ["transient_object"],
zorder: "@include data/zorder.cfg:npcs",
is_strict: true,

collide_dimensions: ["~npc"],
solid_dimensions: ["~npc"],


editor_info: {
	category: "NPCs",
},

properties: {
#-------------------------- constructor/destructor logic --------------------------#
	visual_obj_constructor: "commands :: [
										if(shadow_size != null, spawn_shadow( (string <- shadow_size) )),
										if(start_mode, animation(start_mode), start_standing),
										epi_standing_npc_constructor,
									]",

	epi_standing_npc_constructor: "commands :: null",

#--------------------------	 editor items --------------------------#
	start_mode: { type: "string", default: "stand", persistent: false, set: "set(_data, value) asserting _data = null | 'Attempted to set a property we want to be immutable'" },
	default_speech_text: { type: "string", default: "", editor_info: { type: "string", value: "" } },
	turning_behaviour: { type: "string", default: "face_player", editor_info: { type: "enum", enum_values: ["face_player","random","never"] } },


#-------------------------- cosmetic settings --------------------------#
	shadow_size: "string|null :: 'medium_small'",


#-------------------------- animation sets --------------------------#
	/*
		At least for `standing_animations` and `walking_animations`, these are meant to be overloaded by individual inheritors.

		These are intended to let us check if we should skip interrupting the animation if it's already in progress; `core_anims` is a fallback to let us just repeat any 'weird' or custom animation automatically, and walking animations allows us to do a little introspection to determine if we are actively in a walking anim (note that this is independent from a mode - we may be in a turning animation, but consider ourselves mechanistically in 'walking mode', and intend to resume walking as soon as whatever other animation completes).
	*/	core_anims: "[string] :: ['stand','turn']",
	standing_animations: "[string] :: ['stand']", //a list of walking animations - inheritors may supply more than this

	uninterruptible_animations: "[string] :: []",

#-------------------------- animation sets --------------------------#
	_current_special_stand_anim: { type: "string", default: '' },	

#-------------------------- cutscene commands --------------------------#
	do_pause: "commands :: [change_to_stand_anim, set(_paused,true)]",
	do_resume: "commands :: [fire_event('resume'), set(_paused,false)]",

#-------------------------- core functionality --------------------------#
	start_standing: "commands :: null",  //this is virtual, because we are always in standing mode within this prototype.  It's meaningful for heirs of this prototype.


	do_stand_or_turn_behavior: "if(should_turn,
		turn_around,
		change_to_stand_anim
	)",
	
	
	change_to_stand_anim: "commands :: set(animation,
		if(_current_special_stand_anim != '',
			_current_special_stand_anim,
			'stand'
		)
	)",



	end_anim_decisions: "commands :: do_stand_or_turn_behavior",


#-------------------------- turning criterion --------------------------#
	can_turn: "bool :: (level.cycle - me._last_turned > 10) and (animation not in uninterruptible_animations)",

	should_turn: "bool :: should_turn__standing_npc_behavior",

	should_turn__standing_npc_behavior: "bool :: switch(turning_behaviour,
		'face_player', if(not is_facing_towards_player, true, false),
		'random', if(not 1d2-1, true, false),
		'never', false
	)",


	turn_around: "commands :: if(can_turn,
		[
			if('turn' in available_animations, animation('turn')),
			set(facing, -facing),
			set(_last_turned, level.cycle),
		],
		change_to_stand_anim
	)",




	
	
#-------------------------- conversation functionality --------------------------#
	record_having_conversation__section: "def(string section) -> commands
											level.player.store_event('had_section_'+section+'_of_conversation_with_'+me.label+'_on_level_'+level.id, 1)",
	had_conversation_with_me_already__section: "def(string section) -> bool
											if(level.player.get_stored_event('had_section_'+section+'_of_conversation_with_'+me.label+'_on_level_'+level.id) = 1, true, false)",

	standard_conversation_distance: "int :: 80",

	
	/*
		If we're going to do this, we need to ensure that all possible conversations will actually have a good place for the character to walk to by actually testing the level - checking if there's solid ground in the target spot, and also testing if there's an obstruction in the way.  We basically have two cases to check for:
			• is the speaker at a cliff-edge where the player walking in that direction risks the player falling off the cliff?
			• is the speaker flush against the wall, and would the player trying to speak to them from the wrong direction cause the player to ram into the wall?

		We also have heuristics based on ourself, rather than the player; which affect which order we test things in (with a first-come first-served system for preferentially picking one or the other).  If our turning behavior allows us to turn towards the player, then if the player comes up behind us, we'll turn and face them.  But if we're someone who doesn't turn (since either a few NPCs look ugly doing so (since some 'standing' animations are really leaning-against-a-tree or somesuch), or because the NPC in question is deeply intent on something), then we make the player first try the direction which would make them walk to the other side of us.
	*/
	facing_to_string: "def(int value) -> string if(value = -1, 'left', if(value = 1, 'right', '')) asserting value in [-1, 1]",
	preferred_player_walk_direction:  "int :: if(is_this_direction_okay(my_facing), my_facing, if(is_this_direction_okay(-my_facing), -my_facing, -1))
		where my_facing = if(turning_behaviour != 'face_player', facing, direction_towards_player)",


	is_this_direction_okay:  "def(int direction) -> bool
									level.player.is_there_flat_ground_in_this_direction(standard_conversation_distance + 20, direction) and
									(find_wall(level.player.mid_x, level.player.mid_y, standard_conversation_distance + 20, direction) = null)
							",

	end_anim_decisions_for_custom_anims: "commands :: animation(animation)",

#-------------------------- storage --------------------------#
		//a formula that can be used to draw the character's attention to an object, and make them do whatever in response to it.
	consider_object: {type: "string", default: "null" },


	_paused: { type: "bool", default: false},	
	_last_turned: { type: "int", default: -100, persistent: false },
	_last_interacted: { type: "int", default: -100, persistent: false },
},

			/*if we're doing some special animation, like the butler-kitty, we're expected to self-handle termination*/
on_end_anim: "if(not animation in core_anims,
	end_anim_decisions_for_custom_anims,
	if(_paused,
		change_to_stand_anim,
		end_anim_decisions
	)
)",
	

on_interact: "
	if(not frogatto.boss_list, [
		set(level.zoom, 2), 
		do_pause,
	
		/*
			We set a couple flags here in the player to for other stuff to query.  `in_dialog` will not be set, however, until the actual speech_dialog command gets fired, because it's an internal flag; it corresponds only to the speech_dialog, not to the surround cinematic scripting.
			
			We have a little trick here - because we walk with a timer capping the the maximum amount of time we can possibly walk, we can pad the counter so that the padding will cover the initial delay of the character walking to the left.
			
			We must have the control lock stuff in a later execution frame, because the control lock checks the state these set to see if the player is running
		*/
		set(frogatto.started_conversation_at, level.cycle + 70),  
		set(frogatto.currently_speaking_to, me),
		
		;

		frogatto.add_control_lock(['ctrl_' + facing_to_string(preferred_player_walk_direction)], 'speaking_to_npc'), 
	
		set(_last_interacted, level.cycle),
		schedule(1, fire_event('check_distance')),
	]) where frogatto = (obj frogatto_playable <- level.player)",


	/*
		Repeatedly check each frame to see if the player is far enough away;  if the player isn't and too much time goes by, we're clearly ramming into a wall or something, so fire the conversation anyways as a safeguard.
	*/
on_check_distance: "if(lib.math.length(me, level.player) > standard_conversation_distance or (level.cycle - _last_interacted > 60),
						fire_event('have_distance'),
						schedule(1, fire_event('check_distance'))
					)",

on_have_distance: "[
		frogatto.remove_control_lock('speaking_to_npc'),
		; frogatto.add_control_lock(['ctrl_' + facing_to_string(-direction_towards_player)], 'speaking_to_npc_and_turning_towards_player'),
		do_stand_or_turn_behavior,  //do it immediately rather than possibly having a long delay before the next end-of-standing-anim trigger (or failing to do it ever because the character never gets a free moment to turn) 
		schedule(2, fire_event('start_talking')),
	] where frogatto = (obj frogatto_playable <- level.player)",

on_start_talking: "[
		frogatto.remove_control_lock('speaking_to_npc_and_turning_towards_player'),
		fire_event('talk'), 
		set(level.zoom, 1),
		do_resume,
	] where frogatto = (obj frogatto_playable <- level.player)",

on_talk: "if(default_speech_text, speech_dialog(null, [default_speech_text]))",
}
