{
	id: "cosmetic_effects",
	prototype: ["core_shaders_settings"],
	is_strict: true,

	preload_objects: ['die_cloud_puffy', 'die_cloud_evaporative', 'die_cloud'],


	/*
		This prototype holds a large library/api of various common cosmetic effects in the game.  Some of these are common patterns of color-flashes for objects, some of them are predefined "shader commands", and some of them are spawn patterns for various sets of sprite/audio collections that happen when creatures die, or when various hitsparks play, etc.
		
		These are entirely agnostic to whether something is an interactive, damageable part of gameplay, or whether something is a completely inert, non-interactive piece of scenery - we want almost everything to have access to this API, so we've moved it to a very low level in our hierarchy.
	*/

	properties: {
#-------------------------- vars --------------------------#
	custom_death_script: { type: "null|function()->commands", default: null },

	_last_played_pain_sfx: { type: "int", default: 0, persistent: false },

		#-- cosmetic settings --#	
	material_sound: "MaterialSounds :: enum default",


#-------------------------- cosmetic functions --------------------------#
	play_object_specific_grabbed_cosmetics: "commands :: null",
	


	invincible_flash_sequence: "commands ::	execute(me, [
												flash_blue,
												schedule(5, flash_off),
												schedule(6, flash_blue),
												schedule(8, flash_off)
											])",

	hurt_flash_sequence: "commands	::	execute(me, [
											flash_bright,
											schedule(3, flash_red),
											schedule(6, flash_bright),
											schedule(9, flash_red),
											schedule(12, flash_bright),
											schedule(15, flash_off)
										])",
										
	flash_dim: "commands :: map(graphical_body_parts, [set(value.brightness, 50)])",
	flash_very_bright: "commands :: map(graphical_body_parts, [set(value.brightness, 4000)])",
										
	warn_flash_sequence: "commands	::	execute(me, [
											map(range(20), schedule(value, if(value % 2 = 0, flash_very_bright, flash_dim))),
											schedule(20, flash_off)
										])",
										
	display_damage_type_particles: "def(DamageType damage_type, decimal damage_amount) -> commands 
								if(damage_amount > 0,
									switch(damage_type,
										enum acid, spawn('acid_burn_particles',mid_x,mid_y,1,set(child.parent,me)),
										enum neutral, null
									),
								)",
	

		/*
			these should be the material-interaction sounds of an object being damaged; wood crunching, flesh squishing, glass breaking, etc.  A certain material will make different noise depending on what hurts it, and that's what this handles - wood burning is a very different sound from wood being crushed.  By default we provide a set of sounds for fleshy objects.
		*/									
	play_hurt_sounds: "def(DamageType damage_type, decimal damage_amount, TaxonomyType my_taxonomy) -> commands [if(play_object_specific_hurt_sounds(damage_type, damage_amount) != null, play_object_specific_hurt_sounds(damage_type, damage_amount),
								if(damage_amount > 0,
									switch(damage_type,
										enum bite, sound_falloff('hurt-bite.wav'),
										enum blunt,
											sound_falloff('hurt-blunt.wav'),
										enum stab, sound_falloff('hurt-stab'+1d2+'.wav'),
										enum slash, sound_falloff('hurt-slash'+1d3+'.wav'),
										enum organic_bludgeon, sound_falloff('hurt-organic-bludgeon.wav'),
										enum neutral, null,
										enum impale, sound_falloff('Death-Spikes.wav'),
										enum electricity, sound_falloff('hurt-electricity.wav', 200, 0.5)
									),
									switch(my_taxonomy,
										enum plant, sound_falloff('resist-plant.wav'),
										enum neutral, null
									),
								)),
								if(should_play_pain_sfx,[play_object_specific_pain_vocalization(damage_type, damage_amount), set(_last_played_pain_sfx,level.cycle)])]
									where should_play_pain_sfx = (level.cycle >= (_last_played_pain_sfx + 28))",
								
		//override this to allow an object to have its own specific material sounds
	play_object_specific_hurt_sounds: "def(DamageType damage_type, damage_amount) -> commands switch(damage_type, 
									'neutral', null,
								null)",
	
		//generally speaking, these sounds should not differ between damage types.	If a creature yelps in pain, it should always sound the same.  We might want it to be a matter of magnitude, though.						
	play_object_specific_pain_vocalization: "def(DamageType damage_type, damage_amount) -> commands null",


	graphical_body_parts: "[custom_obj] :: [me]",  //this gets redefined in hittable to actually include the attaches.


	display_posthit_invincibility_flash_sequence: "def(int posthit_invicibility_period) -> commands if(posthit_invicibility_period, 
			map(range(posthit_invicibility_period/2), 'step' ,schedule(step*2, if(step%2=0, map(graphical_body_parts, set(value.alpha,50)) , map(graphical_body_parts, set(value.alpha,255)))  ) ) )",
	flash_bright: "commands :: map(graphical_body_parts, [set(value.brightness, 1023)])",
	flash_blue: "commands :: map(graphical_body_parts, [set(value.red, 50),set(value.green, 50), set(value.blue, 175)])",
	flash_red: "commands :: map(graphical_body_parts, [set(value.red, 255), set(value.green, 100), set(value.blue, 100)])",
	flash_off: "commands :: map(graphical_body_parts, [set(value.brightness, 255), set(value.red, 255), set(value.green, 255), set(value.blue, 255)])",
	
	
	play_death_effects: "def(string type, enum {big, small, tiny} victim_size) -> commands execute(me,
		if(custom_death_script is function()->commands,  custom_death_script(),
			if(me.underwater, splash_effect(),

			(switch(type,
					'none',				null,  //for creatures that specifically want to die without showing anything
					
						/*these are a set of effects based on the type of creature dying*/
					'bug',				[
											vfx('die_cloud_puffy'),
											sound_falloff('death-crunch'+1d2+'.wav'),
										],
					'mushroom',			[
											vfx('die_cloud_evaporative'),
											sound_falloff('death-crunch'+1d2+'.wav')
										],
					'plant',			[
											vfx('die_cloud_evaporative'),
											sound_falloff('Death-Plant-Short'+1d5+'.wav'),
										],
					'animal',			[
											vfx('die_cloud'),
											sound_falloff('death-crunch'+1d2+'.wav'),
											spawn_gibs(enum bone_straight,1d2),
											spawn_gibs(enum bone_skull,1),
										],
					'bird',				[
											vfx('die_cloud'),
											if(victim_size = enum big,
												[
													repeat_fx('die_cloud',5,10,50,70, null),
													repeat_fx('feathers_falling',15,1,50,70, null),
													sound_falloff('death-crunch'+1d2+'.wav'),
													spawn_gibs(enum bone_straight,2d3),
													spawn_gibs(enum bone_skull,1),
												],
												[
													repeat_fx('feathers_falling',5,1,20,30, null),
													sound_falloff('death-crunch'+1d2+'.wav'),
													spawn_gibs(enum bone_straight,1d2),
													spawn_gibs(enum bone_skull,1),
												]
											)											
										],
					'milgramen',		if(victim_size = enum big,
											repeat_fx('die_cloud',10,5,50,70, sound_falloff('Milgramen-Explode'+1d5+'.wav')),
											if(victim_size = enum small,
												[
													repeat_fx('die_cloud_medium',5,4,20,30, null),
													sound_falloff('milgram-pod-death1.wav')
												],
												[
													vfx('die_cloud'),
													sound_falloff('Milgramen-Explode'+1d5+'.wav'),
												]
											)
										),
					 				
					 				
					 								
						/*material-based types - used on both enemies and throwable probs */
					'stone',			[
											sound_falloff('blockbreak.ogg'),
											repeat_fx('die_cloud_medium',5,4,20,30, null),
											spawn_gibs(enum rock_small_cement,5+1d3),
											spawn_gibs(enum rock_big_cement,2d3),
										],
					'stone_large',		[
											sound_falloff('blockbreak.ogg'),
											repeat_fx('die_cloud',5,10,50,70, null),
											spawn_gibs(enum rock_small_cement,3d2,30),
											spawn_gibs(enum rock_big_cement,3d3,30),
										],
					'metal',			[
											sound_falloff('blockbreak.ogg'),
											repeat_fx('die_cloud_medium',5,4,20,30, null),
											spawn_gibs(enum metal_corner,1d2),
											spawn_gibs(enum metal_flat,1d2),
										],
					'wood',				[
											sound_falloff('blockbreak.ogg'),
											repeat_fx('die_cloud_medium',5,4,20,30, null),
											spawn_gibs(enum wooden_corner,1d2),
											spawn_gibs(enum wooden_flat,1d2),
										],
					'porcelain',		[
											sound_falloff('vase-smash1.wav'),
											repeat_fx('die_cloud_medium',5,4,20,30, null),
											spawn_gibs(enum porcelain_small,2d3),
											spawn_gibs(enum porcelain,2d2 + 1),
										],
					'peat_burn_large',	[
											sound_falloff('death-fire-large.wav'),
											repeat_fx('die_cloud_fire',5,4,20,30, null),
											spawn_gibs(enum peat_small,2d3),
											spawn_gibs(enum peat, 2d2 + 1),
										],
					 				
					 								

						/*a set of effects based on the damage source; elsewhere in hittable these actually overrule the creature-type*/
					'fire',				if(victim_size = enum big,
											[
												sound_falloff('death-fire-large.wav'),
												repeat_fx('die_cloud_fire',5,4,30,30, null),
											],
											[
												vfx('die_cloud_fire'),
												sound_falloff('death-fire'+1d5+'.wav'),
											]
										),
					'acid',				if(victim_size = enum big,
											[
												repeat_fx('explosion_acid_big',10,5,50,50,null),
												sound_falloff('death-acid-bubbly.wav'),
											],
											[
												repeat_fx('die_cloud_acid_small',10,6,30,30,null),
												sound_falloff('death-acid-bubbly.wav'),
											]
										),
					'energy',			[
											repeat_fx('die_cloud_electric_medium',1d2+5,4,20,30, null),
											repeat_fx('electric_spark1',3+1d3,1,60,60,null),
											sound_falloff('death-fire'+1d5+'.wav')
										],

						/*large versions of the same, currently used for associated blocks, but potentially used for enemies*/
					'energy_large', 	[
											repeat_fx('explosion_energy_big',1d2+5,4,25,35, null),
											repeat_fx('mote_energy_small',3+1d3,1,60,60,null),
											repeat_fx('mote_energy_small_2',3+1d3,1,60,60,null),
											repeat_fx('electric_spark1',3+1d3,1,60,60,null),
											sound_falloff('death-fire'+1d5+'.wav'),
											spawn_gibs(enum electric_mote, 4d3 + 1),
											spawn_gibs(enum electric_shard_small1, 4d3 + 1),
											spawn_gibs(enum electric_shard_small2, 4d3 + 1),
											spawn_gibs(enum electric_shard_big1, 1d3 + 1),
										],

					'arcane_large',		[
											repeat_fx('explosion_arcane_big',1d2+5,4,20,30, null),
											repeat_fx('electric_spark1',3+1d3,1,60,60,null),
											sound_falloff('death-fire'+1d5+'.wav'),
											spawn_gibs(enum arcane_mote, 4d3 + 1),
											spawn_gibs(enum arcane_shard_small1, 4d3 + 1),
											spawn_gibs(enum arcane_shard_small2, 4d3 + 1),
											spawn_gibs(enum arcane_shard_big1, 1d3 + 1),
										],
					
					
						/*generic recurring effects for miscellaneous things - often not actually enemies*/
					'small',			repeat_fx('die_cloud_small',5,4,10,10, null),
					'medium',			repeat_fx('die_cloud_medium',5,4,20,30, null),
					'large',			repeat_fx('die_cloud',5,10,50,70, sound_falloff('splat.ogg')),
					
					
					
						/*special custom effects for bosses*/
					'mushroom-boss', 	repeat_fx('die_cloud_evaporative',40,10,70,120, sound('death-crunch'+1d2+'.wav')),
					'moth-boss', 		repeat_fx('die_cloud_puffy',40,5,70,120, sound('death-crunch'+1d2+'.wav')),
			)
			where repeat_fx = def(string obj_type, int count, int delay, int spread_x, int spread_y, commands do_sound) -> commands spawn('particle_system_holder', me.mid_x, me.mid_y, if(1d2=2,-1,1), 
				execute(child, map(range(count),schedule(value*delay, [child.set_time_to_live(count*(delay+1)), vfx_spread(obj_type,spread_x,spread_y), do_sound ]))))
			
			
			) where vfx = def(string obj_type) -> commands spawn(obj_type, me.mid_x, me.mid_y, if(1d2=2,-1,1)))
			where vfx_spread = def(string obj_type, int spread_x, int spread_y) -> commands
				spawn(
					obj_type,
					me.mid_x + 1d(spread_x) - 1d(spread_x),
					me.mid_y  + 1d(spread_y) - 1d(spread_y),
					if(1d2=2,-1,1)
				)
		))",
	
	spawn_gibs: "def(DebrisType variation_type, int count, int spread=10) -> commands
		spawn('particle_system_holder', me.mid_x, me.mid_y, if(1d2=2,-1,1),
			execute(child, schedule(1,
				map(range(count),
					spawn(
						'bouncing_debris_chunk',
						mid_x - (spread/2) +1d(spread),
						mid_y - (spread/2) +1d(spread),
					{
						facing: if(1d2=2,1,-1),
						debris_type: variation_type,
						init_vel: enum burst
					})
				 )
			))
		)",


	splash_effect: "def() -> commands if(me.underwater and me.water_bounds,
					[if(abs(me.water_bounds[1] - me.midpoint_y) > 40,
						spawn('water_splash_underwater_big', me.mid_x, me.mid_y, if(1d2=2,me.facing,-me.facing)),
						spawn('water_splash', me.midpoint_x, me.water_bounds[1]+10, if(1d2=2,me.facing,-me.facing))),
					sound_falloff('water-enter.ogg'), ])",
					
#-------------------------- procedural squishing animation --------------------------#
		/*
			This is a set of properties to modify the draw area, which are meant to imitate classic, disney-style "stretch and squish" animations.  We frequently have spring-like objects the player can jump on, which includes most enemies like ants and kitties.   We also often have this behavior trigger when an object hits the ground with force, to give it better kinematics.   The main purpose of building this is that, in the past, we've made some of these animations by hand, but it's very labor-intensive, and it's also quite inflexible - each animation we make, strictly, has only one fixed, pre-drawn amount of bounce.  By making this procedural, everything has access to it almost for free (it does, regrettably, take a little bit of tuning to work well), and it's also able to flexibly apply different amounts of bounce depending on how hard the impact is.

			Caveats:
			- this will interfere/conflict if anything else is trying to modify the draw area at the same time, most likely via a "last come, only served" setup.
			- this is ONLY currently for vertical animations, with the "fulcrum (still point)" of motion being the feet.
		*/

		_last_triggered_squish_animation: { type:"int", default: 0 },
		_magnitude_coefficient_for_current_anim: { type:"decimal", default: 1.0 },
		object_squish_animation_baseline: "decimal :: 1.0",
		object_squish_animation_magnitude: "decimal :: 1.0",

		set_squish_animation_draw_bounds: "commands :: 
			if(object_squish_animation_baseline != 1.0,
				/*
					If the actual opaque-pixels of the graphic that comprises the sprite is not absolutely flush with the 'baseline' (the very bottom of the animation frame) and is, in fact, rather high up in the sprite, as is usually the case, then this whole animation will look rather strange.  In this case, we want to use a more complicated version that tries to anchor the unmoving portion of the animation higher than the very bottom.
				*/  
				set(custom_draw, [0.0, 1.0, 1.0 + object_squish_animation_baseline, 2.0, 3.0, 
					[
						magnitude * ( 1.0 - squish_animation_progress) * (-0.6),
						magnitude * ( 1.0 - squish_animation_progress) * (1.6)
					],
					[
						magnitude * (-1.0 + squish_animation_progress) * (-0.6),
						magnitude * ( 1.0 - squish_animation_progress) * (1.6)
					],
					[
						magnitude * (-1.0 + squish_animation_progress) * (-0.3),
						0.0
					],
					[
						magnitude * (-1.0 + squish_animation_progress) * (-0.3),
						0.0
					],
					[
						magnitude * ( 1.0 - squish_animation_progress) * (-0.3),
						0.0
					]
				]),			
			
				set(custom_draw, [0.0,1.0,2.0,3.0,
					[
						magnitude * ( 1.0 - squish_animation_progress) * (-0.6),
						magnitude * ( 1.0 - squish_animation_progress) * (1.6)
					],
					[
						magnitude * (-1.0 + squish_animation_progress) * (-0.6),
						magnitude * ( 1.0 - squish_animation_progress) * (1.6)
					],
					[
						magnitude * (-1.0 + squish_animation_progress) * (-0.3),
						0.0
					],
					[
						magnitude * ( 1.0 - squish_animation_progress) * (-0.3),
						0.0
					]
				])

			/*
				The draw area is done not via a normalized fraction (0.0 -> 1.0), but is done via direct pixel numbers.  Because of this, since we want to convert over to using a fraction, so that this works on any piece of art, we need to set the `magnitude` value to something appropriate (if it is less than the graphic's dimensions, it's relatively harmless; it just won't fully compress.  However, if it's more than the graphic's dimensions, it'll actually move the x1 value past the x2 one, and we'll essentially get a spatially inverted graphic, which sometimes leads to weird drawing errors (like the final shape being an hourglass shape).
		
				As such, we're grabbing the smaller value of img_w and img_h; whichever one won't distort the shape by overflowing.
			*/
		
			) where magnitude = min(me.img_w/2.0, me.img_h/2.0) * object_squish_animation_magnitude * _magnitude_coefficient_for_current_anim",
		
			
		squish_animation_duration: "{ intro: int, outro: int } :: {
			intro: 10,
			outro: 20,
		}",

		squish_animation_progress: {
			type: "decimal",
			init: "1.0",
			get: "_data",
			set: "[set(_data,value), set_squish_animation_draw_bounds]",
			persistent: false,
		},

		trigger_squish_animation: "def(decimal magnitude) -> commands
		[
			set(me._magnitude_coefficient_for_current_anim, magnitude),
			if(level.cycle - _last_triggered_squish_animation > squish_animation_duration.intro + squish_animation_duration.outro,
				[
					set(_last_triggered_squish_animation, level.cycle),
					animate(me,
						{
							squish_animation_progress: 0.0
						},
						{
							duration: squish_animation_duration.intro,
							easing: lib.math.ease_out_sine,
							on_complete: reverse_squish_animation,
						}
					),
				]
			)
		]",

		reverse_squish_animation: "animate(me,
			{
				squish_animation_progress: 1.0
			},
			{
				duration: squish_animation_duration.outro,
				easing: lib.math.ease_out_elastic,
				on_complete: squish_animation_cleanup,
			}
		)",

		squish_animation_cleanup: "commands :: null/*set(_magnitude_coefficient_for_current_anim, 1.0)*/",





#-------------------------- sfx for material-interactions --------------------------#
		/*
			This is a lookup table that ultimately gives a mapping of "TLA" (three letter tile acronym/mnemonics) to MaterialSounds enums.  We actually provide it in reverse order, because it's far more succinct that way - i.e. with a list of enums followed by the TLAs that use that enum sound.  With this in hand, we do some crazy data-structure inversion to get the opposite of that (the actual data structure we need, which is a mapping from "what tile we're standing on" to "what sound should we play?)".
		*/
	tile_tags: "{string -> MaterialSounds} ::
		fold(
			map(flatten(values(tags)), 'tla',
				{(tla): MaterialSounds <- find(keys(tags), 'key', tla in tags[key])} ),
			a+b)
		where tags = {
			enum wood_plank: 				['fbr','acn','act','ast','isb','fnt',],
			enum foliage:					['ngs',],
			enum dirt:						['nrk','frg',],
			enum stone:						['crk','dbk','cbk',],
			enum wood_solid:				['ins','tnk','int',],
			enum medium_metal:				['ppl','dsb',],
		}",
	
	tile_tags_we_are_standing_on: "[MaterialSounds] ::
		unique(
				map(
					tiles_at(midpoint_x, y+img_h+1),
					tile_tags[value.id]
				)

		)",
		
	object_tags_we_are_standing_on: "[MaterialSounds] ::
		if(standing_on != null,
			[standing_on.material_sound] asserting standing_on is obj cosmetic_effects,
			[]
		)",

	
	tags_we_are_standing_on: "[MaterialSounds] ::
		if( filter(tags_we_are_actually_standing_on, value in valid_standing_tags) = [],
			[enum default], 
			tags_we_are_actually_standing_on
		)
		
		where tags_we_are_actually_standing_on = 
			if(size(object_tags_we_are_standing_on) > 0,
				object_tags_we_are_standing_on,
				tile_tags_we_are_standing_on
			)
		",

	valid_standing_tags: "[MaterialSounds] :: [
							enum dirt,
							enum energy,
							enum foliage,
							enum medium_metal,
							enum padding,
							enum plastic,
							enum stone,
							enum wood_plank,
							enum wood_solid,
						]",
	
	tagged_sfx: "def(MaterialSoundTrigger action) -> [{snd_key : MaterialSounds, sound : commands}]
		switch(action,
			enum slide, [
				{snd_key: enum dirt,				sound: sound('slide-dirt'+1d4+'.wav')},
				{snd_key: enum energy,				sound: sound('slide-energy'+1d3+'.wav',0.3)},
				{snd_key: enum foliage,				sound: sound('slide-foliage'+1d10+'.wav')},
				{snd_key: enum medium_metal,		sound: sound('slide-metal'+1d3+'.wav')},
				{snd_key: enum padding,				sound: sound('footstep-slide-padding'+1d4+'.wav')},
				{snd_key: enum plastic,				sound: sound('footstep-slide-watercooler'+1d6+'.wav')},
				{snd_key: enum stone,				sound: sound('slide-stone'+1d10+'.wav')},
				{snd_key: enum wood_plank,			sound: sound('slide-wood'+1d13+'.wav')},
				{snd_key: enum wood_solid,			sound: sound('slide-wood-solid'+1d5+'.wav')},
				{snd_key: enum default,				sound: sound('slide-dirt'+1d4+'.wav')},
			],
			enum jump, [
				{snd_key: enum dirt,				sound: sound('jump-dirt'+1d9+'.wav')},
				{snd_key: enum energy,				sound: sound('jump-energy'+1d2+'.wav',0.3)},
				{snd_key: enum foliage,				sound: sound('jump-foliage'+1d8+'.wav')},
				{snd_key: enum medium_metal,		sound: sound('jump-metal'+1d7+'.wav',0.6)},
				{snd_key: enum padding,				sound: sound('footstep-jump-padding'+1d7+'.wav')},
				{snd_key: enum plastic,				sound: sound('footstep-jump-watercooler'+1d6+'.wav')},
				{snd_key: enum stone,				sound: sound('footstep-run-stone'+1d8+'.wav')},
				{snd_key: enum wood_plank,			sound: sound('jump-wood'+1d10+'.wav',0.7)},
				{snd_key: enum wood_solid,			sound: sound('jump-wood-solid'+1d3+'.wav',0.6)},
				{snd_key: enum default,				sound: sound('JumpSoft.ogg')},
			],
			[  /*this really is `enum footfall`, but we're treating it as a default*/
				{snd_key: enum dirt,				sound: sound('footstep-'+run+'dirt'+if(running,1d9,1d10)+'.wav')},
				{snd_key: enum energy,				sound: sound('footstep-'+run+'energy'+1d2+'.wav',0.3)},
				{snd_key: enum foliage,				sound: sound('footstep-'+run+'foliage'+if(running,1d9,1d6)+'.wav')},
				{snd_key: enum medium_metal,		sound: sound('footstep-'+run+'metal'+if(running,1d8,1d20)+'.wav')},
				{snd_key: enum padding,				sound: sound('footstep-'+run+'padding'+if(running,1d7,1d7)+'.wav')},
				{snd_key: enum plastic,				sound: sound('footstep-run-watercooler'+1d5+'.wav')},
				{snd_key: enum stone,				sound: sound('footstep-'+run+'stone'+if(running,1d8,1d10)+'.wav')},
				{snd_key: enum wood_plank,			sound: sound('footstep-'+run+'wood'+if(running,1d10,1d7)+'.wav',if(running,0.7,1.0))},
				{snd_key: enum wood_solid,			sound: sound('footstep-'+run+'wood-solid'+if(running,1d7,1d8)+'.wav',0.6)},
				{snd_key: enum default,				sound: sound('footstep-'+run+'dirt'+if(running,1d9,1d10)+'.wav')},
			] where run = if(animation in ['run'],'run-','') where running = (animation in ['run']) 
		)",


	play_material_sound: "def(MaterialSoundTrigger action) -> commands
		snd.sound where snd =  {snd_key: MaterialSounds, sound: commands} <-
			find_or_die(tagged_sfx(action), 
				value.snd_key in tags_we_are_standing_on
			)
		",
		
		
			
	impact_cloud_silent: "def(int new_x, int new_y, string size) -> commands if(size = 'small', spawn('impact_cloud_small',new_x,new_y,1), spawn('impact_cloud',new_x,new_y,1))",
	impact_cloud: "def(int new_x, int new_y, string size) -> commands [impact_cloud_silent(new_x,new_y,size),play_impact_sound]",
	
	impact_starburst_fx: "def(int new_x, int new_y, string size) -> commands spawn(obj_name,new_x,new_y,1)
								where obj_name = if(size = 'small', 'impact_cloud_small', 'impact_cloud')",
	
	custom_impact_sound: "string|null :: null",
	play_impact_sound: "commands :: if(custom_impact_sound != null, sound_attenuated_by_speed(custom_impact_sound), 
							switch(material_sound,
								enum cannon_ball,		sound_attenuated_by_speed('metal-ball-bounce'), 
								enum thick_metal,		sound_attenuated_by_speed('metal-slam'), //i.e. airplane bombs - originally 0.6 vol
								enum small_metal,		sound_attenuated_by_speed('collide-metal-normal'),	 //i.e. keys
								enum medium_metal,		sound_attenuated_by_speed('collide-metal-heavy'),
								enum coconut,			sound_attenuated_by_speed('hopper-block'),
								enum fruit,				sound_attenuated_by_speed('collide-fruit'),
								enum wood_plank,		sound_attenuated_by_speed('collide-wood-crate'),
														sound_attenuated_by_speed('bump-2.wav')
							))",

	},
}
