{
id: "light_source_attache",
serializable: false,
prototype: ["effects_attache"],
	zorder: "@include data/zorder.cfg:shadow_overlay",

/*
	This does NOT create a light bloom or anything (although the sprite being used for this is functionally similar).
	
	This instead provides a mask that gets applied to a black overlay that covers the level when a level's designated as "dark".
	Levels are designated as "dark" by simply having a `shadow_effect_controller` on them, anywhere.
	
	This is just a simple sprite attache, but by having it at a very particular zorder, it gets picked up by a shader that does the special behavior.
*/

types: {
	ImageMaskType: "enum { eased_halo, eased_nohalo, elliptical1, linear_from_25pct, linear_from_50pct, linear_from_75pct, linear  }",
},


properties: {
	_sprite_type: { type: "ImageMaskType", dynamic_initialization: true },
	
	gradient_stops: "{ImageMaskType -> [[decimal]]} :: {
		enum eased_halo:        map([1.00, 0.75, 0.25, 0.05, 0.00], [value]),
		enum eased_nohalo:      map([1.00, 0.75, 0.25, 0.00, 0.00], [value]),
		enum elliptical1:       map([            0.00            ], [value]), //Due to it's weird shape, this isn't factored into light calculations. Just always return 0. (We could switch to texture probes for this.)
		enum linear:            map([1.00,                   0.00], [value]),
		enum linear_from_25pct: map([1.00, 1.00, 0.66, 0.33, 0.00], [value]),
		enum linear_from_50pct: map([1.00,       1.00,       0.00], [value]),
		enum linear_from_75pct: map([1.00, 1.00, 1.00, 1.00, 0.00], [value]),
	}",

	do_setup: "commands :: [
		initialize_position,
		set(animation, enum_to_string(_sprite_type)),
		if( not find(level.chars, value is obj shadow_effect_controller),
			/*
				if there's no controller, then if these actually display it's going to look really ugly - we'll have these giant white circles.  In that case, we need to just immediately delete ourselves.
			*/
			remove_object(me)
		)
	]",
	
	//honestly we probably don't want to use these in most cases, because we'll probably use just straight add_object/remove_object, but it doesn't hurt to add reasonable defaults
	turn_on: "set(alpha, 255)",
	turn_off: "set(alpha, 0)",
	
	light_amount_at: "def(custom_obj|Point2d target) -> decimal
		light_strength * (me.alpha/255.0)
		where light_strength = decimal <- lib.math.interpolate(me.gradient_stops[me._sprite_type], percent_near)[0]
		where percent_near = min(lib.math.length(me, target), radius) / radius
		where radius = min(me.img_w, me.img_h)*me.scale/2,
	",
},


//on_process: "debug('light level at player', light_amount_at(level.player))",


//on_end_anim: "set(animation, animation)",		
			
			
animation: [{
	"@base": true,
	no_remove_alpha_borders: true,
	frames: 1,
	pad: 3,
	scale: 2,
	
	blend: ["one","one"],
	rect: [0,0,255,255],
	duration: -1,

},{
	id: "eased_halo",
	image: "effects/light-blooms/matted-onto-black/eased-halo.png",
},{
	id: "eased_nohalo",
	image: "effects/light-blooms/matted-onto-black/eased-nohalo.png",
},{
	id: "elliptical1",
	image: "effects/light-blooms/matted-onto-black/elliptical1.png",
},{
	id: "linear_from_25pct",
	image: "effects/light-blooms/matted-onto-black/linear-from-25pct.png",
},{
	id: "linear_from_50pct",
	image: "effects/light-blooms/matted-onto-black/linear-from-50pct.png",
},{
	id: "linear_from_75pct",
	image: "effects/light-blooms/matted-onto-black/linear-from-75pct.png",
},{
	id: "linear",
	image: "effects/light-blooms/matted-onto-black/linear.png",
}]
}